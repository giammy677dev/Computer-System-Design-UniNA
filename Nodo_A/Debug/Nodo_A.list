
Nodo_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000564c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800580c  0800580c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800580c  0800580c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f8  200004f8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b38  00000000  00000000  000381fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c8  00000000  00000000  0003c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e81b  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a34c  00000000  00000000  0005bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9c5e  00000000  00000000  00075f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012fb95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000565c  00000000  00000000  0012fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057bc 	.word	0x080057bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080057bc 	.word	0x080057bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay (uint16_t time)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <delay+0x30>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80009b6:	bf00      	nop
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <delay+0x30>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3f9      	bcc.n	80009b8 <delay+0x14>
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	200000d8 	.word	0x200000d8

080009d8 <HAL_TIM_IC_CaptureCallback>:
uint8_t TX_BUFFER[BUFFER_LEN] = {0, 0, 0};

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7f1b      	ldrb	r3, [r3, #28]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	f040 8083 	bne.w	8000af0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x128>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d11a      	bne.n	8000a28 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80009f2:	2100      	movs	r1, #0
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f003 fb89 	bl	800410c <HAL_TIM_ReadCapturedValue>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a41      	ldr	r2, [pc, #260]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009fe:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a1a      	ldr	r2, [r3, #32]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 020a 	bic.w	r2, r2, #10
 8000a14:	621a      	str	r2, [r3, #32]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6a1a      	ldr	r2, [r3, #32]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f042 0202 	orr.w	r2, r2, #2
 8000a24:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000a26:	e063      	b.n	8000af0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d15f      	bne.n	8000af0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a30:	2100      	movs	r1, #0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f003 fb6a 	bl	800410c <HAL_TIM_ReadCapturedValue>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a3c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d907      	bls.n	8000a62 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e00f      	b.n	8000a82 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d909      	bls.n	8000a82 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a7c:	33ff      	adds	r3, #255	; 0xff
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a80:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.3438/2;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fce0 	bl	800044c <__aeabi_ui2d>
 8000a8c:	a31a      	add	r3, pc, #104	; (adr r3, 8000af8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a92:	f7ff fd55 	bl	8000540 <__aeabi_dmul>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 0200 	mov.w	r2, #0
 8000aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa6:	f7ff fe75 	bl	8000794 <__aeabi_ddiv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	460b      	mov	r3, r1
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f7ff ff57 	bl	8000964 <__aeabi_d2uiz>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000abc:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6a1a      	ldr	r2, [r3, #32]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 020a 	bic.w	r2, r2, #10
 8000ad2:	621a      	str	r2, [r3, #32]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6a12      	ldr	r2, [r2, #32]
 8000ade:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0202 	bic.w	r2, r2, #2
 8000aee:	60da      	str	r2, [r3, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	b71758e2 	.word	0xb71758e2
 8000afc:	3fd600d1 	.word	0x3fd600d1
 8000b00:	200004ec 	.word	0x200004ec
 8000b04:	200004e0 	.word	0x200004e0
 8000b08:	200004e4 	.word	0x200004e4
 8000b0c:	200004e8 	.word	0x200004e8
 8000b10:	200004ed 	.word	0x200004ed
 8000b14:	200000d8 	.word	0x200000d8

08000b18 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f001 f8b1 	bl	8001c8c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f7ff ff3a 	bl	80009a4 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin LOW
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f001 f8a7 	bl	8001c8c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HCSR04_Read+0x3c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HCSR04_Read+0x3c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f042 0202 	orr.w	r2, r2, #2
 8000b4c:	60da      	str	r2, [r3, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000d8 	.word	0x200000d8

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fd0a 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f85a 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 fa3a 	bl	8000fdc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b68:	f000 f8ba 	bl	8000ce0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b6c:	f000 f8f8 	bl	8000d60 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000b70:	f000 fa12 	bl	8000f98 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000b74:	f000 f932 	bl	8000ddc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b78:	f000 f98a 	bl	8000e90 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b7c:	f000 f9dc 	bl	8000f38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b80:	2100      	movs	r1, #0
 8000b82:	481f      	ldr	r0, [pc, #124]	; (8000c00 <main+0xa8>)
 8000b84:	f002 ffc4 	bl	8003b10 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 8000b88:	f7ff ffc6 	bl	8000b18 <HCSR04_Read>

	  TX_BUFFER[2] = ((Distance/100) + 48);
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <main+0xac>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <main+0xb0>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	3330      	adds	r3, #48	; 0x30
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <main+0xb4>)
 8000ba0:	709a      	strb	r2, [r3, #2]
	  TX_BUFFER[1] = ((Distance/10)%10 + 48);
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <main+0xac>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <main+0xb8>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <main+0xb8>)
 8000bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb6:	08d9      	lsrs	r1, r3, #3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3330      	adds	r3, #48	; 0x30
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <main+0xb4>)
 8000bca:	705a      	strb	r2, [r3, #1]
	  TX_BUFFER[0] = ((Distance%10) + 48);
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <main+0xac>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <main+0xb8>)
 8000bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd6:	08d9      	lsrs	r1, r3, #3
 8000bd8:	460b      	mov	r3, r1
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3330      	adds	r3, #48	; 0x30
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <main+0xb4>)
 8000bea:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, TX_BUFFER, sizeof(TX_BUFFER), 100);
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <main+0xb4>)
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <main+0xbc>)
 8000bf4:	f003 fdb6 	bl	8004764 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000bf8:	20c8      	movs	r0, #200	; 0xc8
 8000bfa:	f000 fd21 	bl	8001640 <HAL_Delay>
	  HCSR04_Read();
 8000bfe:	e7c3      	b.n	8000b88 <main+0x30>
 8000c00:	200000d8 	.word	0x200000d8
 8000c04:	200004ed 	.word	0x200004ed
 8000c08:	51eb851f 	.word	0x51eb851f
 8000c0c:	200004f0 	.word	0x200004f0
 8000c10:	cccccccd 	.word	0xcccccccd
 8000c14:	20000170 	.word	0x20000170

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09e      	sub	sp, #120	; 0x78
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 fdc0 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	223c      	movs	r2, #60	; 0x3c
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 fdb2 	bl	80057ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fa27 	bl	80020c4 <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c7c:	f000 fa44 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fa50 	bl	8003140 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ca6:	f000 fa2f 	bl	8001108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <SystemClock_Config+0xc4>)
 8000cac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cba:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fc72 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cce:	f000 fa1b 	bl	8001108 <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3778      	adds	r7, #120	; 0x78
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	00021021 	.word	0x00021021

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_I2C1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_I2C1_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d1c:	f000 ffce 	bl	8001cbc <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 f9ef 	bl	8001108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d2e:	f001 f854 	bl	8001dda <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 f9e6 	bl	8001108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d40:	f001 f896 	bl	8001e70 <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f9dd 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000028 	.word	0x20000028
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	2000090e 	.word	0x2000090e

08000d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <MX_SPI1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000dae:	2207      	movs	r2, #7
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000dba:	2208      	movs	r2, #8
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_SPI1_Init+0x74>)
 8000dc0:	f002 fda4 	bl	800390c <HAL_SPI_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dca:	f000 f99d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000074 	.word	0x20000074
 8000dd8:	40013000 	.word	0x40013000

08000ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <MX_TIM1_Init+0xb0>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e02:	2247      	movs	r2, #71	; 0x47
 8000e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e28:	f002 fe1b 	bl	8003a62 <HAL_TIM_IC_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e32:	f000 f969 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e4a:	f003 fb9f 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f000 f958 	bl	8001108 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_TIM1_Init+0xac>)
 8000e70:	f003 f8af 	bl	8003fd2 <HAL_TIM_IC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e7a:	f000 f945 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000d8 	.word	0x200000d8
 8000e8c:	40012c00 	.word	0x40012c00

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ed8:	f002 fdc3 	bl	8003a62 <HAL_TIM_IC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ee2:	f000 f911 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480f      	ldr	r0, [pc, #60]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000ef6:	f003 fb49 	bl	800458c <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f00:	f000 f902 	bl	8001108 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM2_Init+0xa4>)
 8000f1c:	f003 f859 	bl	8003fd2 <HAL_TIM_IC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f26:	f000 f8ef 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000124 	.word	0x20000124

08000f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART1_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART1_UART_Init+0x58>)
 8000f7c:	f003 fba4 	bl	80046c8 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f8bf 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000170 	.word	0x20000170
 8000f94:	40013800 	.word	0x40013800

08000f98 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <MX_USB_PCD_Init+0x40>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_USB_PCD_Init+0x3c>)
 8000fc2:	f000 ffa1 	bl	8001f08 <HAL_PCD_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000fcc:	f000 f89c 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f4 	.word	0x200001f4
 8000fd8:	40005c00 	.word	0x40005c00

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <MX_GPIO_Init+0x124>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a42      	ldr	r2, [pc, #264]	; (8001100 <MX_GPIO_Init+0x124>)
 8000ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <MX_GPIO_Init+0x124>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <MX_GPIO_Init+0x124>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a3c      	ldr	r2, [pc, #240]	; (8001100 <MX_GPIO_Init+0x124>)
 8001010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_GPIO_Init+0x124>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_GPIO_Init+0x124>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a36      	ldr	r2, [pc, #216]	; (8001100 <MX_GPIO_Init+0x124>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <MX_GPIO_Init+0x124>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <MX_GPIO_Init+0x124>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a30      	ldr	r2, [pc, #192]	; (8001100 <MX_GPIO_Init+0x124>)
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <MX_GPIO_Init+0x124>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_GPIO_Init+0x124>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <MX_GPIO_Init+0x124>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_GPIO_Init+0x124>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800106a:	2200      	movs	r2, #0
 800106c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <MX_GPIO_Init+0x128>)
 8001072:	f000 fe0b 	bl	8001c8c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f000 fe04 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001084:	2337      	movs	r3, #55	; 0x37
 8001086:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001088:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	481a      	ldr	r0, [pc, #104]	; (8001104 <MX_GPIO_Init+0x128>)
 800109a:	f000 fc7d 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800109e:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010a2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <MX_GPIO_Init+0x128>)
 80010b8:	f000 fc6e 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010bc:	2301      	movs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f000 fc61 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f000 fc51 	bl	8001998 <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	48001000 	.word	0x48001000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x44>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x44>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114a:	2007      	movs	r0, #7
 800114c:	f000 fb6c 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_I2C_MspInit+0x7c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d127      	bne.n	80011ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x80>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_I2C_MspInit+0x80>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_I2C_MspInit+0x80>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <HAL_I2C_MspInit+0x84>)
 80011b2:	f000 fbf1 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_I2C_MspInit+0x80>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40005400 	.word	0x40005400
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_SPI_MspInit+0x7c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d128      	bne.n	8001258 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_SPI_MspInit+0x80>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_SPI_MspInit+0x80>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_SPI_MspInit+0x80>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001236:	23e0      	movs	r3, #224	; 0xe0
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001246:	2305      	movs	r3, #5
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f000 fba0 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40013000 	.word	0x40013000
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_TIM_IC_MspInit+0xf0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d132      	bne.n	80012f0 <HAL_TIM_IC_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a2d      	ldr	r2, [pc, #180]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012cc:	2306      	movs	r3, #6
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012da:	f000 fb5d 	bl	8001998 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	201b      	movs	r0, #27
 80012e4:	f000 faab 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012e8:	201b      	movs	r0, #27
 80012ea:	f000 fac4 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ee:	e02e      	b.n	800134e <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d129      	bne.n	800134e <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_IC_MspInit+0xf4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800132a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133c:	2301      	movs	r3, #1
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f000 fb25 	bl	8001998 <HAL_GPIO_Init>
}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x8c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12f      	bne.n	80013e2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0x90>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_UART_MspInit+0x90>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_UART_MspInit+0x90>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_UART_MspInit+0x90>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_UART_MspInit+0x90>)
 80013a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013a4:	6153      	str	r3, [r2, #20]
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_UART_MspInit+0x90>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013b2:	2330      	movs	r3, #48	; 0x30
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c2:	2307      	movs	r3, #7
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <HAL_UART_MspInit+0x94>)
 80013ce:	f000 fae3 	bl	8001998 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2025      	movs	r0, #37	; 0x25
 80013d8:	f000 fa31 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013dc:	2025      	movs	r0, #37	; 0x25
 80013de:	f000 fa4a 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000800 	.word	0x48000800

080013f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_PCD_MspInit+0x80>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d129      	bne.n	800146e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_PCD_MspInit+0x84>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <HAL_PCD_MspInit+0x84>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_PCD_MspInit+0x84>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001444:	230e      	movs	r3, #14
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f000 faa1 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_PCD_MspInit+0x84>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_PCD_MspInit+0x84>)
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_PCD_MspInit+0x84>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005c00 	.word	0x40005c00
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f898 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM1_CC_IRQHandler+0x10>)
 80014da:	f002 fc5b 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000d8 	.word	0x200000d8

080014e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART1_IRQHandler+0x10>)
 80014ee:	f003 f9cd 	bl	800488c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000170 	.word	0x20000170

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <SystemInit+0x20>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <SystemInit+0x20>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001558 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0b      	ldr	r4, [pc, #44]	; (800156c <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800154a:	f7ff ffd7 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f004 f909 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001552:	f7ff fb01 	bl	8000b58 <main>

08001556 <LoopForever>:

LoopForever:
    b LoopForever
 8001556:	e7fe      	b.n	8001556 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001558:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001564:	08005814 	.word	0x08005814
  ldr r2, =_sbss
 8001568:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800156c:	200004f8 	.word	0x200004f8

08001570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC1_2_IRQHandler>
	...

08001574 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x28>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x28>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f94f 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fdc0 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f967 	bl	8001892 <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f92f 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	200004f4 	.word	0x200004f4

08001628 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;  
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200004f4 	.word	0x200004f4

08001640 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d008      	beq.n	80018ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e020      	b.n	8001910 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 020e 	bic.w	r2, r2, #14
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800192e:	2b02      	cmp	r3, #2
 8001930:	d005      	beq.n	800193e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2204      	movs	r2, #4
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e027      	b.n	800198e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 020e 	bic.w	r2, r2, #14
 800194c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
    } 
  }
  return status;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e154      	b.n	8001c52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8146 	beq.w	8001c4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d005      	beq.n	80019d8 <HAL_GPIO_Init+0x40>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d130      	bne.n	8001a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0201 	and.w	r2, r3, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d017      	beq.n	8001a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d123      	bne.n	8001aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a0 	beq.w	8001c4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b55      	ldr	r3, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b24:	4a53      	ldr	r2, [pc, #332]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4e:	d019      	beq.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2e0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_GPIO_Init+0x1e8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1e4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1e0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1dc>
 8001b70:	2304      	movs	r3, #4
 8001b72:	e008      	b.n	8001b86 <HAL_GPIO_Init+0x1ee>
 8001b74:	2305      	movs	r3, #5
 8001b76:	e006      	b.n	8001b86 <HAL_GPIO_Init+0x1ee>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e004      	b.n	8001b86 <HAL_GPIO_Init+0x1ee>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x1ee>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_GPIO_Init+0x1ee>
 8001b84:	2300      	movs	r3, #0
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b96:	4937      	ldr	r1, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf2:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c1c:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f aea3 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	48001000 	.word	0x48001000
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e081      	b.n	8001dd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fa3a 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2224      	movs	r2, #36	; 0x24
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d104      	bne.n	8001d56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69d9      	ldr	r1, [r3, #28]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d138      	bne.n	8001e62 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e032      	b.n	8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2224      	movs	r2, #36	; 0x24
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d139      	bne.n	8001efa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e033      	b.n	8001efc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001efa:	2302      	movs	r3, #2
  }
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af06      	add	r7, sp, #24
 8001f0e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0d0      	b.n	80020bc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fa62 	bl	80013f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fbd3 	bl	80056ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e04c      	b.n	8001fe6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3336      	adds	r3, #54	; 0x36
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3338      	adds	r3, #56	; 0x38
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	333c      	adds	r3, #60	; 0x3c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3340      	adds	r3, #64	; 0x40
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3ad      	bcc.n	8001f4c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e044      	b.n	8002080 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3b5      	bcc.n	8001ff6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	687e      	ldr	r6, [r7, #4]
 8002092:	466d      	mov	r5, sp
 8002094:	f106 0410 	add.w	r4, r6, #16
 8002098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	602b      	str	r3, [r5, #0]
 80020a0:	1d33      	adds	r3, r6, #4
 80020a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	f003 fb3c 	bl	8005722 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f001 b823 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 817d 	beq.w	80023fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002100:	4bbc      	ldr	r3, [pc, #752]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00c      	beq.n	8002126 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210c:	4bb9      	ldr	r3, [pc, #740]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d15c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x10e>
 8002118:	4bb6      	ldr	r3, [pc, #728]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d155      	bne.n	80021d2 <HAL_RCC_OscConfig+0x10e>
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800213a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x94>
 8002152:	4ba8      	ldr	r3, [pc, #672]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e015      	b.n	8002184 <HAL_RCC_OscConfig+0xc0>
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002170:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002174:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002180:	4b9c      	ldr	r3, [pc, #624]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002188:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800218c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002198:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 811f 	beq.w	80023f8 <HAL_RCC_OscConfig+0x334>
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 8116 	bne.w	80023f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f000 bfaf 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12e>
 80021e4:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a82      	ldr	r2, [pc, #520]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e036      	b.n	8002260 <HAL_RCC_OscConfig+0x19c>
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x158>
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7b      	ldr	r2, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a78      	ldr	r2, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e021      	b.n	8002260 <HAL_RCC_OscConfig+0x19c>
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x184>
 800222e:	4b71      	ldr	r3, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a70      	ldr	r2, [pc, #448]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6d      	ldr	r2, [pc, #436]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0x19c>
 8002248:	4b6a      	ldr	r3, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a69      	ldr	r2, [pc, #420]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f023 020f 	bic.w	r2, r3, #15
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	495f      	ldr	r1, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002276:	4313      	orrs	r3, r2
 8002278:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d059      	beq.n	800233e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff f9cd 	bl	8001628 <HAL_GetTick>
 800228e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	e00a      	b.n	80022aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff f9c8 	bl	8001628 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d902      	bls.n	80022aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	f000 bf43 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 80022aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_RCC_OscConfig+0x218>
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	e015      	b.n	8002308 <HAL_RCC_OscConfig+0x244>
 80022dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002310:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002314:	fa92 f2a2 	rbit	r2, r2
 8002318:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800231c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ab      	beq.n	8002294 <HAL_RCC_OscConfig+0x1d0>
 800233c:	e05d      	b.n	80023fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f973 	bl	8001628 <HAL_GetTick>
 8002342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff f96e 	bl	8001628 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d902      	bls.n	800235e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	f000 bee9 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002372:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0x2cc>
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x2f8>
 8002390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002394:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_RCC_OscConfig+0x330>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ab      	bne.n	8002348 <HAL_RCC_OscConfig+0x284>
 80023f0:	e003      	b.n	80023fa <HAL_RCC_OscConfig+0x336>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 817d 	beq.w	800270a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002410:	4ba6      	ldr	r3, [pc, #664]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800241c:	4ba3      	ldr	r3, [pc, #652]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d172      	bne.n	800250e <HAL_RCC_OscConfig+0x44a>
 8002428:	4ba0      	ldr	r3, [pc, #640]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d16c      	bne.n	800250e <HAL_RCC_OscConfig+0x44a>
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002446:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x3a0>
 800245e:	4b93      	ldr	r3, [pc, #588]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e013      	b.n	800248c <HAL_RCC_OscConfig+0x3c8>
 8002464:	2302      	movs	r3, #2
 8002466:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800247c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002488:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2202      	movs	r2, #2
 800248e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002492:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800249e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCC_OscConfig+0x410>
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f000 be2e 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b75      	ldr	r3, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	21f8      	movs	r1, #248	; 0xf8
 80024ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024f2:	fa91 f1a1 	rbit	r1, r1
 80024f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024fe:	fab1 f181 	clz	r1, r1
 8002502:	b2c9      	uxtb	r1, r1
 8002504:	408b      	lsls	r3, r1
 8002506:	4969      	ldr	r1, [pc, #420]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250c:	e0fd      	b.n	800270a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8088 	beq.w	8002630 <HAL_RCC_OscConfig+0x56c>
 8002520:	2301      	movs	r3, #1
 8002522:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002532:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	461a      	mov	r2, r3
 8002548:	2301      	movs	r3, #1
 800254a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff f86c 	bl	8001628 <HAL_GetTick>
 8002550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff f867 	bl	8001628 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	f000 bde2 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800257e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_OscConfig+0x4d8>
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e013      	b.n	80025c4 <HAL_RCC_OscConfig+0x500>
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2202      	movs	r2, #2
 80025c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0af      	beq.n	8002556 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	21f8      	movs	r1, #248	; 0xf8
 800260c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002614:	fa91 f1a1 	rbit	r1, r1
 8002618:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800261c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002620:	fab1 f181 	clz	r1, r1
 8002624:	b2c9      	uxtb	r1, r1
 8002626:	408b      	lsls	r3, r1
 8002628:	4920      	ldr	r1, [pc, #128]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
 800262e:	e06c      	b.n	800270a <HAL_RCC_OscConfig+0x646>
 8002630:	2301      	movs	r3, #1
 8002632:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002642:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002650:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe ffe4 	bl	8001628 <HAL_GetTick>
 8002660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe ffdf 	bl	8001628 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	f000 bd5a 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800268e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d104      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5ec>
 80026a6:	4b01      	ldr	r3, [pc, #4]	; (80026ac <HAL_RCC_OscConfig+0x5e8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e015      	b.n	80026d8 <HAL_RCC_OscConfig+0x614>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026d4:	4bc8      	ldr	r3, [pc, #800]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2202      	movs	r2, #2
 80026da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ad      	bne.n	8002666 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8110 	beq.w	8002940 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d079      	beq.n	8002824 <HAL_RCC_OscConfig+0x760>
 8002730:	2301      	movs	r3, #1
 8002732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	4bab      	ldr	r3, [pc, #684]	; (80029fc <HAL_RCC_OscConfig+0x938>)
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	2301      	movs	r3, #1
 8002758:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe ff65 	bl	8001628 <HAL_GetTick>
 800275e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe ff60 	bl	8001628 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d902      	bls.n	800277a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	f000 bcdb 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027b8:	2202      	movs	r2, #2
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 80027d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027e0:	2102      	movs	r1, #2
 80027e2:	6019      	str	r1, [r3, #0]
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f1a3 	rbit	r1, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027fa:	6019      	str	r1, [r3, #0]
  return result;
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0a0      	beq.n	8002764 <HAL_RCC_OscConfig+0x6a0>
 8002822:	e08d      	b.n	8002940 <HAL_RCC_OscConfig+0x87c>
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002850:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x938>)
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	461a      	mov	r2, r3
 8002862:	2300      	movs	r3, #0
 8002864:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fedf 	bl	8001628 <HAL_GetTick>
 800286a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00a      	b.n	8002886 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe feda 	bl	8001628 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d902      	bls.n	8002886 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	f000 bc55 	b.w	8003130 <HAL_RCC_OscConfig+0x106c>
 8002886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800288e:	2202      	movs	r2, #2
 8002890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028b2:	2202      	movs	r2, #2
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028d6:	2202      	movs	r2, #2
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028fe:	2102      	movs	r1, #2
 8002900:	6019      	str	r1, [r3, #0]
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f1a3 	rbit	r1, r3
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002918:	6019      	str	r1, [r3, #0]
  return result;
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d197      	bne.n	8002870 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 81a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295c:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a22      	ldr	r2, [pc, #136]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800298e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x93c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_RCC_OscConfig+0x93c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x93c>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fe3b 	bl	8001628 <HAL_GetTick>
 80029b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	e009      	b.n	80029cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b8:	f7fe fe36 	bl	8001628 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e3b1      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x93c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10d      	bne.n	8002a04 <HAL_RCC_OscConfig+0x940>
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a02      	ldr	r2, [pc, #8]	; (80029f8 <HAL_RCC_OscConfig+0x934>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e03c      	b.n	8002a70 <HAL_RCC_OscConfig+0x9ac>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	10908120 	.word	0x10908120
 8002a00:	40007000 	.word	0x40007000
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x96a>
 8002a14:	4bc1      	ldr	r3, [pc, #772]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4ac0      	ldr	r2, [pc, #768]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	4bbe      	ldr	r3, [pc, #760]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4abd      	ldr	r2, [pc, #756]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	e020      	b.n	8002a70 <HAL_RCC_OscConfig+0x9ac>
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x994>
 8002a3e:	4bb7      	ldr	r3, [pc, #732]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4ab6      	ldr	r2, [pc, #728]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4bb4      	ldr	r3, [pc, #720]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4ab3      	ldr	r2, [pc, #716]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0x9ac>
 8002a58:	4bb0      	ldr	r3, [pc, #704]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4aaf      	ldr	r2, [pc, #700]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	4bad      	ldr	r3, [pc, #692]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4aac      	ldr	r2, [pc, #688]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8081 	beq.w	8002b84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fdd1 	bl	8001628 <HAL_GetTick>
 8002a86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fdcc 	bl	8001628 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e345      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aac:	2202      	movs	r2, #2
 8002aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aea:	601a      	str	r2, [r3, #0]
  return result;
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002af4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0xa4c>
 8002b0a:	4b84      	ldr	r3, [pc, #528]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0xa74>
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	4b79      	ldr	r3, [pc, #484]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b40:	2102      	movs	r1, #2
 8002b42:	6011      	str	r1, [r2, #0]
 8002b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	fa92 f1a2 	rbit	r1, r2
 8002b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b5a:	6011      	str	r1, [r2, #0]
  return result;
 8002b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f002 021f 	and.w	r2, r2, #31
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d084      	beq.n	8002a8c <HAL_RCC_OscConfig+0x9c8>
 8002b82:	e07f      	b.n	8002c84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fd50 	bl	8001628 <HAL_GetTick>
 8002b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fd4b 	bl	8001628 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2c4      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bec:	601a      	str	r2, [r3, #0]
  return result;
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bf6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0xb4e>
 8002c0c:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	e013      	b.n	8002c3a <HAL_RCC_OscConfig+0xb76>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c42:	2102      	movs	r1, #2
 8002c44:	6011      	str	r1, [r2, #0]
 8002c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	fa92 f1a2 	rbit	r1, r2
 8002c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c5c:	6011      	str	r1, [r2, #0]
  return result;
 8002c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f002 021f 	and.w	r2, r2, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d184      	bne.n	8002b8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a22      	ldr	r2, [pc, #136]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8242 	beq.w	800312e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_RCC_OscConfig+0xc58>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	f000 8213 	beq.w	80030de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f040 8162 	bne.w	8002f8e <HAL_RCC_OscConfig+0xeca>
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cee:	601a      	str	r2, [r3, #0]
  return result;
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fc8a 	bl	8001628 <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e00c      	b.n	8002d34 <HAL_RCC_OscConfig+0xc70>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fc82 	bl	8001628 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1fd      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d58:	601a      	str	r2, [r3, #0]
  return result;
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d102      	bne.n	8002d7e <HAL_RCC_OscConfig+0xcba>
 8002d78:	4bb0      	ldr	r3, [pc, #704]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	e027      	b.n	8002dce <HAL_RCC_OscConfig+0xd0a>
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	4b9c      	ldr	r3, [pc, #624]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002dd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dda:	6011      	str	r1, [r2, #0]
 8002ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	fa92 f1a2 	rbit	r1, r2
 8002dea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002df2:	6011      	str	r1, [r2, #0]
  return result;
 8002df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	fab2 f282 	clz	r2, r2
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	f042 0220 	orr.w	r2, r2, #32
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f002 021f 	and.w	r2, r2, #31
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f202 	lsl.w	r2, r1, r2
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d182      	bne.n	8002d20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	497f      	ldr	r1, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e66:	601a      	str	r2, [r3, #0]
  return result;
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	461a      	mov	r2, r3
 8002e84:	2301      	movs	r3, #1
 8002e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fbce 	bl	8001628 <HAL_GetTick>
 8002e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	e009      	b.n	8002ea6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fbc9 	bl	8001628 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e144      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ed4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xe2c>
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	e027      	b.n	8002f40 <HAL_RCC_OscConfig+0xe7c>
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	fa93 f2a3 	rbit	r2, r3
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	fa92 f1a2 	rbit	r1, r2
 8002f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f64:	6011      	str	r1, [r2, #0]
  return result;
 8002f66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	fab2 f282 	clz	r2, r2
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	f002 021f 	and.w	r2, r2, #31
 8002f80:	2101      	movs	r1, #1
 8002f82:	fa01 f202 	lsl.w	r2, r1, r2
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d082      	beq.n	8002e92 <HAL_RCC_OscConfig+0xdce>
 8002f8c:	e0cf      	b.n	800312e <HAL_RCC_OscConfig+0x106a>
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fbc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fb28 	bl	8001628 <HAL_GetTick>
 8002fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	e009      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fb23 	bl	8001628 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e09e      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003016:	601a      	str	r2, [r3, #0]
  return result;
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003020:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d104      	bne.n	8003040 <HAL_RCC_OscConfig+0xf7c>
 8003036:	4b01      	ldr	r3, [pc, #4]	; (800303c <HAL_RCC_OscConfig+0xf78>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e029      	b.n	8003090 <HAL_RCC_OscConfig+0xfcc>
 800303c:	40021000 	.word	0x40021000
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800306e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_OscConfig+0x1078>)
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003094:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003098:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fa92 f1a2 	rbit	r1, r2
 80030ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030b4:	6011      	str	r1, [r2, #0]
  return result;
 80030b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f042 0220 	orr.w	r2, r2, #32
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	f002 021f 	and.w	r2, r2, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d180      	bne.n	8002fde <HAL_RCC_OscConfig+0xf1a>
 80030dc:	e027      	b.n	800312e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e01e      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_OscConfig+0x1078>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	429a      	cmp	r2, r3
 8003110:	d10b      	bne.n	800312a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003112:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09e      	sub	sp, #120	; 0x78
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e162      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	498b      	ldr	r1, [pc, #556]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e14a      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	497f      	ldr	r1, [pc, #508]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80dc 	beq.w	800336c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d13c      	bne.n	8003236 <HAL_RCC_ClockConfig+0xf6>
 80031bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xa6>
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	e00f      	b.n	8003206 <HAL_RCC_ClockConfig+0xc6>
 80031e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320a:	65ba      	str	r2, [r7, #88]	; 0x58
 800320c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d17b      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0f3      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d13c      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x178>
 800323e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800324c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x128>
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00f      	b.n	8003288 <HAL_RCC_ClockConfig+0x148>
 8003268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	63ba      	str	r2, [r7, #56]	; 0x38
 800328e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13a      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b2      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 80032b8:	2302      	movs	r3, #2
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x1a0>
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e00d      	b.n	80032fc <HAL_RCC_ClockConfig+0x1bc>
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	2302      	movs	r3, #2
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2202      	movs	r2, #2
 80032fe:	61ba      	str	r2, [r7, #24]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	fa92 f2a2 	rbit	r2, r2
 8003306:	617a      	str	r2, [r7, #20]
  return result;
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e079      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe f974 	bl	8001628 <HAL_GetTick>
 8003340:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe f970 	bl	8001628 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e061      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d214      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4906      	ldr	r1, [pc, #24]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e040      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	491a      	ldr	r1, [pc, #104]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4912      	ldr	r1, [pc, #72]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033e2:	f000 f829 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	22f0      	movs	r2, #240	; 0xf0
 80033f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	60fa      	str	r2, [r7, #12]
  return result;
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	40d3      	lsrs	r3, r2
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x2ec>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	fa21 f303 	lsr.w	r3, r1, r3
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_ClockConfig+0x2f0>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_ClockConfig+0x2f4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe f8c2 	bl	80015a0 <HAL_InitTick>
  
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3778      	adds	r7, #120	; 0x78
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	080057d4 	.word	0x080057d4
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004

08003438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b08b      	sub	sp, #44	; 0x2c
 800343c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x30>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x36>
 8003466:	e03c      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800346a:	623b      	str	r3, [r7, #32]
      break;
 800346c:	e03c      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003474:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003478:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	607a      	str	r2, [r7, #4]
  return result;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003492:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	220f      	movs	r2, #15
 800349c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	60fa      	str	r2, [r7, #12]
  return result;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	40d3      	lsrs	r3, r2
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	623b      	str	r3, [r7, #32]
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e4:	623b      	str	r3, [r7, #32]
      break;
 80034e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	372c      	adds	r7, #44	; 0x2c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	080057ec 	.word	0x080057ec
 8003504:	080057fc 	.word	0x080057fc
 8003508:	003d0900 	.word	0x003d0900

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000000 	.word	0x20000000

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800352a:	f7ff ffef 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003538:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800353c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	603a      	str	r2, [r7, #0]
  return result;
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	080057e4 	.word	0x080057e4

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800356e:	f7ff ffcd 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003572:	4601      	mov	r1, r0
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800357c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003580:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	fa92 f2a2 	rbit	r2, r2
 8003588:	603a      	str	r2, [r7, #0]
  return result;
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	40d3      	lsrs	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	080057e4 	.word	0x080057e4

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b092      	sub	sp, #72	; 0x48
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80d4 	beq.w	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe f809 	bl	8001628 <HAL_GetTick>
 8003616:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe f805 	bl	8001628 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e169      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8084 	beq.w	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003654:	429a      	cmp	r2, r3
 8003656:	d07c      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2301      	movs	r3, #1
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	461a      	mov	r2, r3
 80036a6:	2300      	movs	r3, #0
 80036a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd ffb5 	bl	8001628 <HAL_GetTick>
 80036be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd ffb1 	bl	8001628 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e113      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036d8:	2302      	movs	r3, #2
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	2302      	movs	r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	61fb      	str	r3, [r7, #28]
  return result;
 80036f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d108      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003706:	4b01      	ldr	r3, [pc, #4]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	e00d      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	10908100 	.word	0x10908100
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2202      	movs	r2, #2
 800372a:	613a      	str	r2, [r7, #16]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	60fa      	str	r2, [r7, #12]
  return result;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0b7      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003752:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	496a      	ldr	r1, [pc, #424]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003764:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b66      	ldr	r3, [pc, #408]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a65      	ldr	r2, [pc, #404]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003784:	4b60      	ldr	r3, [pc, #384]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	495d      	ldr	r1, [pc, #372]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a2:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4956      	ldr	r1, [pc, #344]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c0:	4b51      	ldr	r3, [pc, #324]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	494e      	ldr	r1, [pc, #312]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037de:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f023 0210 	bic.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4947      	ldr	r1, [pc, #284]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037fc:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	493f      	ldr	r1, [pc, #252]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381a:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f023 0220 	bic.w	r2, r3, #32
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4938      	ldr	r1, [pc, #224]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003828:	4313      	orrs	r3, r2
 800382a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003838:	4b33      	ldr	r3, [pc, #204]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4930      	ldr	r1, [pc, #192]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4929      	ldr	r1, [pc, #164]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4921      	ldr	r1, [pc, #132]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	491a      	ldr	r1, [pc, #104]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	4912      	ldr	r1, [pc, #72]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	490b      	ldr	r1, [pc, #44]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3748      	adds	r7, #72	; 0x48
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e09d      	b.n	8003a5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392e:	d009      	beq.n	8003944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
 8003936:	e005      	b.n	8003944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fc40 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003984:	d902      	bls.n	800398c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e002      	b.n	8003992 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800398c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003990:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800399a:	d007      	beq.n	80039ac <HAL_SPI_Init+0xa0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0204 	and.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a28:	ea42 0103 	orr.w	r1, r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e049      	b.n	8003b08 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd fbed 	bl	8001268 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 fb9f 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_IC_Start_IT+0x1e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e023      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x66>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_IC_Start_IT+0x2e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	e01b      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x66>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_IC_Start_IT+0x3e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	e013      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x66>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_IC_Start_IT+0x4e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	e00b      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x66>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_IC_Start_IT+0x5e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	e003      	b.n	8003b76 <HAL_TIM_IC_Start_IT+0x66>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_TIM_IC_Start_IT+0x78>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e013      	b.n	8003bb0 <HAL_TIM_IC_Start_IT+0xa0>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d104      	bne.n	8003b98 <HAL_TIM_IC_Start_IT+0x88>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e00b      	b.n	8003bb0 <HAL_TIM_IC_Start_IT+0xa0>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d104      	bne.n	8003ba8 <HAL_TIM_IC_Start_IT+0x98>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e003      	b.n	8003bb0 <HAL_TIM_IC_Start_IT+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bb2:	7bbb      	ldrb	r3, [r7, #14]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bb8:	7b7b      	ldrb	r3, [r7, #13]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0d8      	b.n	8003d74 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_IC_Start_IT+0xc2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e023      	b.n	8003c1a <HAL_TIM_IC_Start_IT+0x10a>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_IC_Start_IT+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e01b      	b.n	8003c1a <HAL_TIM_IC_Start_IT+0x10a>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_IC_Start_IT+0xe2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e013      	b.n	8003c1a <HAL_TIM_IC_Start_IT+0x10a>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_IC_Start_IT+0xf2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	e00b      	b.n	8003c1a <HAL_TIM_IC_Start_IT+0x10a>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_IC_Start_IT+0x102>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	e003      	b.n	8003c1a <HAL_TIM_IC_Start_IT+0x10a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_IC_Start_IT+0x11a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0x142>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0x12a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0x142>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_IC_Start_IT+0x13a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_IC_Start_IT+0x142>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d841      	bhi.n	8003cdc <HAL_TIM_IC_Start_IT+0x1cc>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <HAL_TIM_IC_Start_IT+0x150>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c95 	.word	0x08003c95
 8003c64:	08003cdd 	.word	0x08003cdd
 8003c68:	08003cdd 	.word	0x08003cdd
 8003c6c:	08003cdd 	.word	0x08003cdd
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003cdd 	.word	0x08003cdd
 8003c78:	08003cdd 	.word	0x08003cdd
 8003c7c:	08003cdd 	.word	0x08003cdd
 8003c80:	08003cb9 	.word	0x08003cb9
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003ccb 	.word	0x08003ccb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0202 	orr.w	r2, r2, #2
 8003ca2:	60da      	str	r2, [r3, #12]
      break;
 8003ca4:	e01d      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0204 	orr.w	r2, r2, #4
 8003cb4:	60da      	str	r2, [r3, #12]
      break;
 8003cb6:	e014      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0208 	orr.w	r2, r2, #8
 8003cc6:	60da      	str	r2, [r3, #12]
      break;
 8003cc8:	e00b      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0210 	orr.w	r2, r2, #16
 8003cd8:	60da      	str	r2, [r3, #12]
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d144      	bne.n	8003d72 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fc25 	bl	8004540 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_TIM_IC_Start_IT+0x26c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_TIM_IC_Start_IT+0x222>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d013      	beq.n	8003d32 <HAL_TIM_IC_Start_IT+0x222>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_TIM_IC_Start_IT+0x270>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_TIM_IC_Start_IT+0x222>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_TIM_IC_Start_IT+0x274>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_TIM_IC_Start_IT+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_TIM_IC_Start_IT+0x278>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_IC_Start_IT+0x222>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <HAL_TIM_IC_Start_IT+0x27c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d115      	bne.n	8003d5e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_TIM_IC_Start_IT+0x280>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d015      	beq.n	8003d70 <HAL_TIM_IC_Start_IT+0x260>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d011      	beq.n	8003d70 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5c:	e008      	b.n	8003d70 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e000      	b.n	8003d72 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40013400 	.word	0x40013400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fc fdfe 	bl	80009d8 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9e2 	bl	80041a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f9e9 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0204 	mvn.w	r2, #4
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc fdd4 	bl	80009d8 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9b8 	bl	80041a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9bf 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0208 	mvn.w	r2, #8
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc fdaa 	bl	80009d8 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f98e 	bl	80041a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f995 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0210 	mvn.w	r2, #16
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc fd80 	bl	80009d8 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f964 	bl	80041a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f96b 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0201 	mvn.w	r2, #1
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f93e 	bl	8004194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fbae 	bl	80046a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fba1 	bl	80046b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f919 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0220 	mvn.w	r2, #32
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fb61 	bl	800468c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e088      	b.n	8004102 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f000 f979 	bl	8004304 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 020c 	bic.w	r2, r2, #12
 8004020:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6999      	ldr	r1, [r3, #24]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
 8004034:	e060      	b.n	80040f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11c      	bne.n	8004076 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f000 f9c2 	bl	80043d4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800405e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6999      	ldr	r1, [r3, #24]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e040      	b.n	80040f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f000 f9df 	bl	800444e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020c 	bic.w	r2, r2, #12
 800409e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69d9      	ldr	r1, [r3, #28]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
 80040b2:	e021      	b.n	80040f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d11c      	bne.n	80040f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f000 f9fc 	bl	80044c6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	61da      	str	r2, [r3, #28]
 80040f2:	e001      	b.n	80040f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d831      	bhi.n	8004184 <HAL_TIM_ReadCapturedValue+0x78>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004185 	.word	0x08004185
 8004130:	08004185 	.word	0x08004185
 8004134:	08004185 	.word	0x08004185
 8004138:	08004167 	.word	0x08004167
 800413c:	08004185 	.word	0x08004185
 8004140:	08004185 	.word	0x08004185
 8004144:	08004185 	.word	0x08004185
 8004148:	08004171 	.word	0x08004171
 800414c:	08004185 	.word	0x08004185
 8004150:	08004185 	.word	0x08004185
 8004154:	08004185 	.word	0x08004185
 8004158:	0800417b 	.word	0x0800417b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	60fb      	str	r3, [r7, #12]

      break;
 8004164:	e00f      	b.n	8004186 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	60fb      	str	r3, [r7, #12]

      break;
 800416e:	e00a      	b.n	8004186 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	60fb      	str	r3, [r7, #12]

      break;
 8004178:	e005      	b.n	8004186 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	60fb      	str	r3, [r7, #12]

      break;
 8004182:	e000      	b.n	8004186 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004184:	bf00      	nop
  }

  return tmpreg;
 8004186:	68fb      	ldr	r3, [r7, #12]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a39      	ldr	r2, [pc, #228]	; (80042ec <TIM_Base_SetConfig+0x108>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a38      	ldr	r2, [pc, #224]	; (80042f0 <TIM_Base_SetConfig+0x10c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a37      	ldr	r2, [pc, #220]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <TIM_Base_SetConfig+0x108>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <TIM_Base_SetConfig+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a26      	ldr	r2, [pc, #152]	; (80042fc <TIM_Base_SetConfig+0x118>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a25      	ldr	r2, [pc, #148]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <TIM_Base_SetConfig+0x104>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <TIM_Base_SetConfig+0x110>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a0f      	ldr	r2, [pc, #60]	; (80042fc <TIM_Base_SetConfig+0x118>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0xe8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d103      	bne.n	80042d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	615a      	str	r2, [r3, #20]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0201 	bic.w	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <TIM_TI1_SetConfig+0xbc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <TIM_TI1_SetConfig+0x56>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d00f      	beq.n	800435a <TIM_TI1_SetConfig+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_TI1_SetConfig+0xc0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_TI1_SetConfig+0x56>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <TIM_TI1_SetConfig+0xc4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_TI1_SetConfig+0x56>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <TIM_TI1_SetConfig+0xc8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_TI1_SetConfig+0x56>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <TIM_TI1_SetConfig+0xcc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <TIM_TI1_SetConfig+0x5a>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <TIM_TI1_SetConfig+0x5c>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e003      	b.n	800437e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	b2db      	uxtb	r3, r3
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 030a 	bic.w	r3, r3, #10
 8004398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 030a 	and.w	r3, r3, #10
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40013400 	.word	0x40013400
 80043d0:	40014000 	.word	0x40014000

080043d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0210 	bic.w	r2, r3, #16
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	031b      	lsls	r3, r3, #12
 8004418:	b29b      	uxth	r3, r3
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800444e:	b480      	push	{r7}
 8004450:	b087      	sub	sp, #28
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	b2db      	uxtb	r3, r3
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800449e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b087      	sub	sp, #28
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	031b      	lsls	r3, r3, #12
 800450a:	b29b      	uxth	r3, r3
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004518:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	031b      	lsls	r3, r3, #12
 800451e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e063      	b.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2b      	ldr	r2, [pc, #172]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d108      	bne.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d013      	beq.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a12      	ldr	r2, [pc, #72]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10c      	bne.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	4313      	orrs	r3, r2
 8004650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40013400 	.word	0x40013400
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40014000 	.word	0x40014000

0800468c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e040      	b.n	800475c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc fe38 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fbbe 	bl	8004e88 <UART_SetConfig>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e022      	b.n	800475c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fd88 	bl	8005234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fe0f 	bl	8005378 <UART_CheckIdleState>
 800475a:	4603      	mov	r3, r0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004778:	2b20      	cmp	r3, #32
 800477a:	f040 8082 	bne.w	8004882 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_UART_Transmit+0x26>
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07a      	b.n	8004884 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_UART_Transmit+0x38>
 8004798:	2302      	movs	r3, #2
 800479a:	e073      	b.n	8004884 <HAL_UART_Transmit+0x120>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2221      	movs	r2, #33	; 0x21
 80047b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047b2:	f7fc ff39 	bl	8001628 <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d108      	bne.n	80047e4 <HAL_UART_Transmit+0x80>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e003      	b.n	80047ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047f4:	e02d      	b.n	8004852 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2180      	movs	r1, #128	; 0x80
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fe02 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e039      	b.n	8004884 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004822:	b292      	uxth	r2, r2
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3302      	adds	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e008      	b.n	8004840 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b292      	uxth	r2, r2
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1cb      	bne.n	80047f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	2140      	movs	r1, #64	; 0x40
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fdce 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e005      	b.n	8004884 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0ba      	sub	sp, #232	; 0xe8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80048ba:	4013      	ands	r3, r2
 80048bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d115      	bne.n	80048f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00f      	beq.n	80048f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 82a3 	beq.w	8004e30 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
      }
      return;
 80048f2:	e29d      	b.n	8004e30 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8117 	beq.w	8004b2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800490a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800490e:	4b85      	ldr	r3, [pc, #532]	; (8004b24 <HAL_UART_IRQHandler+0x298>)
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 810a 	beq.w	8004b2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d011      	beq.n	8004948 <HAL_UART_IRQHandler+0xbc>
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2201      	movs	r2, #1
 8004936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_UART_IRQHandler+0xec>
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2202      	movs	r2, #2
 8004966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <HAL_UART_IRQHandler+0x11c>
 8004984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00b      	beq.n	80049a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2204      	movs	r2, #4
 8004996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499e:	f043 0202 	orr.w	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049da:	f043 0208 	orr.w	r2, r3, #8
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_UART_IRQHandler+0x18a>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8209 	beq.w	8004e34 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04f      	beq.n	8004b0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fd8f 	bl	8005592 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d141      	bne.n	8004b06 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1d9      	bne.n	8004a82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d013      	beq.n	8004afe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <HAL_UART_IRQHandler+0x29c>)
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc ff1a 	bl	800191c <HAL_DMA_Abort_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	e00f      	b.n	8004b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9ac 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e00b      	b.n	8004b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9a8 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9a4 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b1c:	e18a      	b.n	8004e34 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1e:	bf00      	nop
    return;
 8004b20:	e188      	b.n	8004e34 <HAL_UART_IRQHandler+0x5a8>
 8004b22:	bf00      	nop
 8004b24:	04000120 	.word	0x04000120
 8004b28:	08005659 	.word	0x08005659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 8143 	bne.w	8004dbc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 813c 	beq.w	8004dbc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8135 	beq.w	8004dbc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2210      	movs	r2, #16
 8004b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	f040 80b1 	bne.w	8004ccc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 815c 	beq.w	8004e38 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	f080 8154 	bcs.w	8004e38 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	f000 8085 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bd4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1da      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e1      	bne.n	8004bf0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e4      	bne.n	8004c70 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc fdfd 	bl	80018aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8d3 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cca:	e0b5      	b.n	8004e38 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a7 	beq.w	8004e3c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80a2 	beq.w	8004e3c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e4      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d52:	633a      	str	r2, [r7, #48]	; 0x30
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f023 0310 	bic.w	r3, r3, #16
 8004d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	69b9      	ldr	r1, [r7, #24]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	617b      	str	r3, [r7, #20]
   return(result);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e4      	bne.n	8004d78 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f85b 	bl	8004e70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dba:	e03f      	b.n	8004e3c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x55a>
 8004dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fc7a 	bl	80056d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004de4:	e02d      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00e      	beq.n	8004e10 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
    }
    return;
 8004e0e:	e017      	b.n	8004e40 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fc2b 	bl	8005684 <UART_EndTransmit_IT>
    return;
 8004e2e:	e008      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e30:	bf00      	nop
 8004e32:	e006      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004e34:	bf00      	nop
 8004e36:	e004      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004e40:	bf00      	nop
  }

}
 8004e42:	37e8      	adds	r7, #232	; 0xe8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004eb6:	f023 030c 	bic.w	r3, r3, #12
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4aa8      	ldr	r2, [pc, #672]	; (80051a4 <UART_SetConfig+0x31c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <UART_SetConfig+0xc2>
 8004f08:	4ba7      	ldr	r3, [pc, #668]	; (80051a8 <UART_SetConfig+0x320>)
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d817      	bhi.n	8004f44 <UART_SetConfig+0xbc>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x94>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f3f 	.word	0x08004f3f
 8004f28:	08004f33 	.word	0x08004f33
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e0b5      	b.n	800509e <UART_SetConfig+0x216>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e0b2      	b.n	800509e <UART_SetConfig+0x216>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0af      	b.n	800509e <UART_SetConfig+0x216>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0ac      	b.n	800509e <UART_SetConfig+0x216>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0a9      	b.n	800509e <UART_SetConfig+0x216>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a97      	ldr	r2, [pc, #604]	; (80051ac <UART_SetConfig+0x324>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d124      	bne.n	8004f9e <UART_SetConfig+0x116>
 8004f54:	4b94      	ldr	r3, [pc, #592]	; (80051a8 <UART_SetConfig+0x320>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f60:	d011      	beq.n	8004f86 <UART_SetConfig+0xfe>
 8004f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f66:	d817      	bhi.n	8004f98 <UART_SetConfig+0x110>
 8004f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6c:	d011      	beq.n	8004f92 <UART_SetConfig+0x10a>
 8004f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f72:	d811      	bhi.n	8004f98 <UART_SetConfig+0x110>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <UART_SetConfig+0xf8>
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d006      	beq.n	8004f8c <UART_SetConfig+0x104>
 8004f7e:	e00b      	b.n	8004f98 <UART_SetConfig+0x110>
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e08b      	b.n	800509e <UART_SetConfig+0x216>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e088      	b.n	800509e <UART_SetConfig+0x216>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e085      	b.n	800509e <UART_SetConfig+0x216>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e082      	b.n	800509e <UART_SetConfig+0x216>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e07f      	b.n	800509e <UART_SetConfig+0x216>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <UART_SetConfig+0x328>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d124      	bne.n	8004ff2 <UART_SetConfig+0x16a>
 8004fa8:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <UART_SetConfig+0x320>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fb4:	d011      	beq.n	8004fda <UART_SetConfig+0x152>
 8004fb6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0x164>
 8004fbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc0:	d011      	beq.n	8004fe6 <UART_SetConfig+0x15e>
 8004fc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc6:	d811      	bhi.n	8004fec <UART_SetConfig+0x164>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x14c>
 8004fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x158>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x164>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e061      	b.n	800509e <UART_SetConfig+0x216>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e05e      	b.n	800509e <UART_SetConfig+0x216>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e05b      	b.n	800509e <UART_SetConfig+0x216>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e058      	b.n	800509e <UART_SetConfig+0x216>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e055      	b.n	800509e <UART_SetConfig+0x216>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6f      	ldr	r2, [pc, #444]	; (80051b4 <UART_SetConfig+0x32c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d124      	bne.n	8005046 <UART_SetConfig+0x1be>
 8004ffc:	4b6a      	ldr	r3, [pc, #424]	; (80051a8 <UART_SetConfig+0x320>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005008:	d011      	beq.n	800502e <UART_SetConfig+0x1a6>
 800500a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800500e:	d817      	bhi.n	8005040 <UART_SetConfig+0x1b8>
 8005010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005014:	d011      	beq.n	800503a <UART_SetConfig+0x1b2>
 8005016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501a:	d811      	bhi.n	8005040 <UART_SetConfig+0x1b8>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <UART_SetConfig+0x1a0>
 8005020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005024:	d006      	beq.n	8005034 <UART_SetConfig+0x1ac>
 8005026:	e00b      	b.n	8005040 <UART_SetConfig+0x1b8>
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e037      	b.n	800509e <UART_SetConfig+0x216>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e034      	b.n	800509e <UART_SetConfig+0x216>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e031      	b.n	800509e <UART_SetConfig+0x216>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e02e      	b.n	800509e <UART_SetConfig+0x216>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e02b      	b.n	800509e <UART_SetConfig+0x216>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5b      	ldr	r2, [pc, #364]	; (80051b8 <UART_SetConfig+0x330>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d124      	bne.n	800509a <UART_SetConfig+0x212>
 8005050:	4b55      	ldr	r3, [pc, #340]	; (80051a8 <UART_SetConfig+0x320>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505c:	d011      	beq.n	8005082 <UART_SetConfig+0x1fa>
 800505e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x20c>
 8005064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005068:	d011      	beq.n	800508e <UART_SetConfig+0x206>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x20c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x1f4>
 8005074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x200>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x20c>
 800507c:	2300      	movs	r3, #0
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x216>
 8005082:	2302      	movs	r3, #2
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e00a      	b.n	800509e <UART_SetConfig+0x216>
 8005088:	2304      	movs	r3, #4
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e007      	b.n	800509e <UART_SetConfig+0x216>
 800508e:	2308      	movs	r3, #8
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e004      	b.n	800509e <UART_SetConfig+0x216>
 8005094:	2310      	movs	r3, #16
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e001      	b.n	800509e <UART_SetConfig+0x216>
 800509a:	2310      	movs	r3, #16
 800509c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a6:	d15c      	bne.n	8005162 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80050a8:	7ffb      	ldrb	r3, [r7, #31]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d827      	bhi.n	80050fe <UART_SetConfig+0x276>
 80050ae:	a201      	add	r2, pc, #4	; (adr r2, 80050b4 <UART_SetConfig+0x22c>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe fa24 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e013      	b.n	8005108 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fe fa42 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b34      	ldr	r3, [pc, #208]	; (80051bc <UART_SetConfig+0x334>)
 80050ea:	61bb      	str	r3, [r7, #24]
        break;
 80050ec:	e00c      	b.n	8005108 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fe f9a3 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80050f2:	61b8      	str	r0, [r7, #24]
        break;
 80050f4:	e008      	b.n	8005108 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fa:	61bb      	str	r3, [r7, #24]
        break;
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77bb      	strb	r3, [r7, #30]
        break;
 8005106:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8084 	beq.w	8005218 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	005a      	lsls	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d916      	bls.n	800515c <UART_SetConfig+0x2d4>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d212      	bcs.n	800515c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f023 030f 	bic.w	r3, r3, #15
 800513e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	b29b      	uxth	r3, r3
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	b29a      	uxth	r2, r3
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	4313      	orrs	r3, r2
 8005150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	89fa      	ldrh	r2, [r7, #14]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	e05d      	b.n	8005218 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	77bb      	strb	r3, [r7, #30]
 8005160:	e05a      	b.n	8005218 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005162:	7ffb      	ldrb	r3, [r7, #31]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d836      	bhi.n	80051d6 <UART_SetConfig+0x34e>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0x2e8>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	08005195 	.word	0x08005195
 8005174:	0800519d 	.word	0x0800519d
 8005178:	080051c1 	.word	0x080051c1
 800517c:	080051d7 	.word	0x080051d7
 8005180:	080051c7 	.word	0x080051c7
 8005184:	080051d7 	.word	0x080051d7
 8005188:	080051d7 	.word	0x080051d7
 800518c:	080051d7 	.word	0x080051d7
 8005190:	080051cf 	.word	0x080051cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005194:	f7fe f9c6 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 8005198:	61b8      	str	r0, [r7, #24]
        break;
 800519a:	e021      	b.n	80051e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800519c:	f7fe f9e4 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 80051a0:	61b8      	str	r0, [r7, #24]
        break;
 80051a2:	e01d      	b.n	80051e0 <UART_SetConfig+0x358>
 80051a4:	40013800 	.word	0x40013800
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40004400 	.word	0x40004400
 80051b0:	40004800 	.word	0x40004800
 80051b4:	40004c00 	.word	0x40004c00
 80051b8:	40005000 	.word	0x40005000
 80051bc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <UART_SetConfig+0x3a8>)
 80051c2:	61bb      	str	r3, [r7, #24]
        break;
 80051c4:	e00c      	b.n	80051e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c6:	f7fe f937 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80051ca:	61b8      	str	r0, [r7, #24]
        break;
 80051cc:	e008      	b.n	80051e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	61bb      	str	r3, [r7, #24]
        break;
 80051d4:	e004      	b.n	80051e0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	77bb      	strb	r3, [r7, #30]
        break;
 80051de:	bf00      	nop
    }

    if (pclk != 0U)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	085a      	lsrs	r2, r3, #1
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d908      	bls.n	8005214 <UART_SetConfig+0x38c>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d204      	bcs.n	8005214 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	e001      	b.n	8005218 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005224:	7fbb      	ldrb	r3, [r7, #30]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	007a1200 	.word	0x007a1200

08005234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005332:	d10a      	bne.n	800534a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005388:	f7fc f94e 	bl	8001628 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10e      	bne.n	80053ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f82d 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e023      	b.n	8005402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d10e      	bne.n	80053e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f817 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00d      	b.n	8005402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	e0a5      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	f000 80a1 	beq.w	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fc f8ff 	bl	8001628 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
 8005436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13e      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005450:	667b      	str	r3, [r7, #100]	; 0x64
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	663b      	str	r3, [r7, #96]	; 0x60
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800548e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e067      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04f      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d147      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
 8005502:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e6      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	66bb      	str	r3, [r7, #104]	; 0x68
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005534:	623a      	str	r2, [r7, #32]
 8005536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	61bb      	str	r3, [r7, #24]
   return(result);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e010      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	f43f af4a 	beq.w	800541c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3770      	adds	r7, #112	; 0x70
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005592:	b480      	push	{r7}
 8005594:	b095      	sub	sp, #84	; 0x54
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e6      	bne.n	800559a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	61fb      	str	r3, [r7, #28]
   return(result);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	2b01      	cmp	r3, #1
 8005606:	d118      	bne.n	800563a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	60bb      	str	r3, [r7, #8]
   return(result);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0310 	bic.w	r3, r3, #16
 800561c:	647b      	str	r3, [r7, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800564c:	bf00      	nop
 800564e:	3754      	adds	r7, #84	; 0x54
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fbf0 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	60bb      	str	r3, [r7, #8]
   return(result);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	613b      	str	r3, [r7, #16]
   return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fbbc 	bl	8004e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d0:	bf00      	nop
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80056f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	b29b      	uxth	r3, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	b29b      	uxth	r3, r3
 800570a:	4013      	ands	r3, r2
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005722:	b084      	sub	sp, #16
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	f107 0014 	add.w	r0, r7, #20
 8005730:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	b004      	add	sp, #16
 8005762:	4770      	bx	lr

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	; (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	; (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	; (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	; (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 f820 	bl	80057bc <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	0800580c 	.word	0x0800580c
 80057a0:	0800580c 	.word	0x0800580c
 80057a4:	0800580c 	.word	0x0800580c
 80057a8:	08005810 	.word	0x08005810

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
