
Nodo_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005184  08005184  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005184  08005184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800518c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000494  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001848f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cee  00000000  00000000  000384cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012d8  00000000  00000000  0003c5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea39  00000000  00000000  0003d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab7f  00000000  00000000  0005c2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9cc2  00000000  00000000  00076e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130b02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005574  00000000  00000000  00130b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800511c 	.word	0x0800511c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800511c 	.word	0x0800511c

080001c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f023 030f 	bic.w	r3, r3, #15
 80001d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	f043 030c 	orr.w	r3, r3, #12
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001f4:	7bbb      	ldrb	r3, [r7, #14]
 80001f6:	f043 030c 	orr.w	r3, r3, #12
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80001fe:	7bbb      	ldrb	r3, [r7, #14]
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	b2db      	uxtb	r3, r3
 8000206:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000208:	f107 0208 	add.w	r2, r7, #8
 800020c:	2364      	movs	r3, #100	; 0x64
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2304      	movs	r3, #4
 8000212:	214e      	movs	r1, #78	; 0x4e
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <lcd_send_cmd+0x5c>)
 8000216:	f001 f979 	bl	800150c <HAL_I2C_Master_Transmit>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af02      	add	r7, sp, #8
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f023 030f 	bic.w	r3, r3, #15
 8000238:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	011b      	lsls	r3, r3, #4
 800023e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	f043 030d 	orr.w	r3, r3, #13
 8000246:	b2db      	uxtb	r3, r3
 8000248:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	f043 0309 	orr.w	r3, r3, #9
 8000250:	b2db      	uxtb	r3, r3
 8000252:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000254:	7bbb      	ldrb	r3, [r7, #14]
 8000256:	f043 030d 	orr.w	r3, r3, #13
 800025a:	b2db      	uxtb	r3, r3
 800025c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	f043 0309 	orr.w	r3, r3, #9
 8000264:	b2db      	uxtb	r3, r3
 8000266:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000268:	f107 0208 	add.w	r2, r7, #8
 800026c:	2364      	movs	r3, #100	; 0x64
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2304      	movs	r3, #4
 8000272:	214e      	movs	r1, #78	; 0x4e
 8000274:	4803      	ldr	r0, [pc, #12]	; (8000284 <lcd_send_data+0x5c>)
 8000276:	f001 f949 	bl	800150c <HAL_I2C_Master_Transmit>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000028 	.word	0x20000028

08000288 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    switch (row)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d003      	beq.n	80002a0 <lcd_put_cur+0x18>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d005      	beq.n	80002aa <lcd_put_cur+0x22>
 800029e:	e009      	b.n	80002b4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	603b      	str	r3, [r7, #0]
            break;
 80002a8:	e004      	b.n	80002b4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002b0:	603b      	str	r3, [r7, #0]
            break;
 80002b2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff85 	bl	80001c8 <lcd_send_cmd>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_init>:


void lcd_init (void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002ca:	2032      	movs	r0, #50	; 0x32
 80002cc:	f000 fd50 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002d0:	2030      	movs	r0, #48	; 0x30
 80002d2:	f7ff ff79 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fd4a 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002dc:	2030      	movs	r0, #48	; 0x30
 80002de:	f7ff ff73 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fd44 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002e8:	2030      	movs	r0, #48	; 0x30
 80002ea:	f7ff ff6d 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(10);
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fd3e 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002f4:	2020      	movs	r0, #32
 80002f6:	f7ff ff67 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(10);
 80002fa:	200a      	movs	r0, #10
 80002fc:	f000 fd38 	bl	8000d70 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000300:	2028      	movs	r0, #40	; 0x28
 8000302:	f7ff ff61 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fd32 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800030c:	2008      	movs	r0, #8
 800030e:	f7ff ff5b 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000312:	2001      	movs	r0, #1
 8000314:	f000 fd2c 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ff55 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fd26 	bl	8000d70 <HAL_Delay>
	HAL_Delay(1);
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fd23 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800032a:	2006      	movs	r0, #6
 800032c:	f7ff ff4c 	bl	80001c8 <lcd_send_cmd>
	HAL_Delay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fd1d 	bl	8000d70 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000336:	200c      	movs	r0, #12
 8000338:	f7ff ff46 	bl	80001c8 <lcd_send_cmd>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000348:	e006      	b.n	8000358 <lcd_send_string+0x18>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff68 	bl	8000228 <lcd_send_data>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f4      	bne.n	800034a <lcd_send_string+0xa>
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fc98 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f87e 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 fa0a 	bl	8000790 <MX_GPIO_Init>
  MX_I2C1_Init();
 800037c:	f000 f8de 	bl	800053c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000380:	f000 f91c 	bl	80005bc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000384:	f000 f9e2 	bl	800074c <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000388:	f000 f956 	bl	8000638 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800038c:	f000 f9ae 	bl	80006ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, RX_BUFFER, sizeof(RX_BUFFER));
 8000390:	2203      	movs	r2, #3
 8000392:	4924      	ldr	r1, [pc, #144]	; (8000424 <main+0xb8>)
 8000394:	4824      	ldr	r0, [pc, #144]	; (8000428 <main+0xbc>)
 8000396:	f003 fce5 	bl	8003d64 <HAL_UART_Receive_IT>

  lcd_init();
 800039a:	f7ff ff94 	bl	80002c6 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if ((RX_BUFFER[2] == 0) && (RX_BUFFER[1] == 0) && (RX_BUFFER[0] == 0)) {
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <main+0xb8>)
 80003a0:	789b      	ldrb	r3, [r3, #2]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d112      	bne.n	80003cc <main+0x60>
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <main+0xb8>)
 80003a8:	785b      	ldrb	r3, [r3, #1]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d10e      	bne.n	80003cc <main+0x60>
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <main+0xb8>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10a      	bne.n	80003cc <main+0x60>
	  		lcd_put_cur(0, 0);
 80003b6:	2100      	movs	r1, #0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f7ff ff65 	bl	8000288 <lcd_put_cur>
	  		lcd_send_string ("Nessun dato");
 80003be:	481b      	ldr	r0, [pc, #108]	; (800042c <main+0xc0>)
 80003c0:	f7ff ffbe 	bl	8000340 <lcd_send_string>
	  		HAL_Delay(200);
 80003c4:	20c8      	movs	r0, #200	; 0xc8
 80003c6:	f000 fcd3 	bl	8000d70 <HAL_Delay>
 80003ca:	e02a      	b.n	8000422 <main+0xb6>
	  	  }
	  	  else {
	  		Distance_hundreds = RX_BUFFER[2];
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <main+0xb8>)
 80003ce:	789a      	ldrb	r2, [r3, #2]
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <main+0xc4>)
 80003d2:	701a      	strb	r2, [r3, #0]
			Distance_tens = RX_BUFFER[1];
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <main+0xb8>)
 80003d6:	785a      	ldrb	r2, [r3, #1]
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <main+0xc8>)
 80003da:	701a      	strb	r2, [r3, #0]
			Distance_units = RX_BUFFER[0];
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <main+0xb8>)
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <main+0xcc>)
 80003e2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(200);
 80003e4:	20c8      	movs	r0, #200	; 0xc8
 80003e6:	f000 fcc3 	bl	8000d70 <HAL_Delay>

			lcd_put_cur(0, 0);
 80003ea:	2100      	movs	r1, #0
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff4b 	bl	8000288 <lcd_put_cur>
			lcd_send_string ("Dist = ");
 80003f2:	4812      	ldr	r0, [pc, #72]	; (800043c <main+0xd0>)
 80003f4:	f7ff ffa4 	bl	8000340 <lcd_send_string>
			lcd_send_data(Distance_hundreds);   //cifra delle centinaia
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <main+0xc4>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff13 	bl	8000228 <lcd_send_data>
			lcd_send_data(Distance_tens);  //cifra delle decine
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <main+0xc8>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff0e 	bl	8000228 <lcd_send_data>
			lcd_send_data(Distance_units);  //cifra delle unità
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <main+0xcc>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff09 	bl	8000228 <lcd_send_data>
			lcd_send_string(" cm");
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <main+0xd4>)
 8000418:	f7ff ff92 	bl	8000340 <lcd_send_string>
			HAL_Delay(200);
 800041c:	20c8      	movs	r0, #200	; 0xc8
 800041e:	f000 fca7 	bl	8000d70 <HAL_Delay>
	  	  if ((RX_BUFFER[2] == 0) && (RX_BUFFER[1] == 0) && (RX_BUFFER[0] == 0)) {
 8000422:	e7bc      	b.n	800039e <main+0x32>
 8000424:	20000498 	.word	0x20000498
 8000428:	20000124 	.word	0x20000124
 800042c:	08005134 	.word	0x08005134
 8000430:	20000494 	.word	0x20000494
 8000434:	20000495 	.word	0x20000495
 8000438:	20000496 	.word	0x20000496
 800043c:	08005140 	.word	0x08005140
 8000440:	08005148 	.word	0x08005148

08000444 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_UART_RxCpltCallback+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d104      	bne.n	8000462 <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);
 8000458:	2203      	movs	r2, #3
 800045a:	4905      	ldr	r1, [pc, #20]	; (8000470 <HAL_UART_RxCpltCallback+0x2c>)
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <HAL_UART_RxCpltCallback+0x28>)
 800045e:	f003 fc81 	bl	8003d64 <HAL_UART_Receive_IT>
    }
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000124 	.word	0x20000124
 8000470:	20000498 	.word	0x20000498

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b09e      	sub	sp, #120	; 0x78
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800047e:	2228      	movs	r2, #40	; 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f004 fe42 	bl	800510c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	223c      	movs	r2, #60	; 0x3c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 fe34 	bl	800510c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004a4:	2303      	movs	r3, #3
 80004a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	2310      	movs	r3, #16
 80004b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	2302      	movs	r3, #2
 80004bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fc0a 	bl	8001ce8 <HAL_RCC_OscConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004da:	f000 f9ef 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	230f      	movs	r3, #15
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e2:	2302      	movs	r3, #2
 80004e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fc32 	bl	8002d64 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000506:	f000 f9d9 	bl	80008bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <SystemClock_Config+0xc4>)
 800050c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000516:	2300      	movs	r3, #0
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800051a:	2300      	movs	r3, #0
 800051c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fe55 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800052c:	f000 f9c6 	bl	80008bc <Error_Handler>
  }
}
 8000530:	bf00      	nop
 8000532:	3778      	adds	r7, #120	; 0x78
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	00021021 	.word	0x00021021

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	f000 ff38 	bl	80013ec <HAL_I2C_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 f99b 	bl	80008bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x74>)
 800058a:	f001 fa37 	bl	80019fc <HAL_I2CEx_ConfigAnalogFilter>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 f992 	bl	80008bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	2100      	movs	r1, #0
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059c:	f001 fa79 	bl	8001a92 <HAL_I2CEx_ConfigDigitalFilter>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f989 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40005400 	.word	0x40005400
 80005b8:	2000090e 	.word	0x2000090e

080005bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_SPI1_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_SPI1_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_SPI1_Init+0x74>)
 80005c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_SPI1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_SPI1_Init+0x74>)
 80005d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_SPI1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_SPI1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_SPI1_Init+0x74>)
 80005ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_SPI1_Init+0x74>)
 80005f2:	2208      	movs	r2, #8
 80005f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_SPI1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_SPI1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_SPI1_Init+0x74>)
 800060a:	2207      	movs	r2, #7
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_SPI1_Init+0x74>)
 8000616:	2208      	movs	r2, #8
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_SPI1_Init+0x74>)
 800061c:	f002 ff88 	bl	8003530 <HAL_SPI_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f949 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000074 	.word	0x20000074
 8000634:	40013000 	.word	0x40013000

08000638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MX_TIM1_Init+0xac>)
 8000658:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <MX_TIM1_Init+0xb0>)
 800065a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_TIM1_Init+0xac>)
 800065e:	2247      	movs	r2, #71	; 0x47
 8000660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_TIM1_Init+0xac>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_TIM1_Init+0xac>)
 800066a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800066e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_TIM1_Init+0xac>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_TIM1_Init+0xac>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_TIM1_Init+0xac>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000682:	4818      	ldr	r0, [pc, #96]	; (80006e4 <MX_TIM1_Init+0xac>)
 8000684:	f002 ffff 	bl	8003686 <HAL_TIM_IC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800068e:	f000 f915 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <MX_TIM1_Init+0xac>)
 80006a6:	f003 fa8f 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006b0:	f000 f904 	bl	80008bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_TIM1_Init+0xac>)
 80006cc:	f003 f832 	bl	8003734 <HAL_TIM_IC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006d6:	f000 f8f1 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000d8 	.word	0x200000d8
 80006e8:	40012c00 	.word	0x40012c00

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART1_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000730:	f003 faca 	bl	8003cc8 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8bf 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000124 	.word	0x20000124
 8000748:	40013800 	.word	0x40013800

0800074c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <MX_USB_PCD_Init+0x40>)
 8000754:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 8000758:	2208      	movs	r2, #8
 800075a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 800075e:	2202      	movs	r2, #2
 8000760:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 8000764:	2202      	movs	r2, #2
 8000766:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_USB_PCD_Init+0x3c>)
 8000776:	f001 f9d8 	bl	8001b2a <HAL_PCD_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000780:	f000 f89c 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200001a8 	.word	0x200001a8
 800078c:	40005c00 	.word	0x40005c00

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a42      	ldr	r2, [pc, #264]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a30      	ldr	r2, [pc, #192]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_GPIO_Init+0x124>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_GPIO_Init+0x124>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <MX_GPIO_Init+0x124>)
 800080c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_GPIO_Init+0x124>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800081e:	2200      	movs	r2, #0
 8000820:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000824:	4824      	ldr	r0, [pc, #144]	; (80008b8 <MX_GPIO_Init+0x128>)
 8000826:	f000 fdc9 	bl	80013bc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 fdc2 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000838:	2337      	movs	r3, #55	; 0x37
 800083a:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_GPIO_Init+0x128>)
 800084e:	f000 fc3b 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000852:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000856:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_GPIO_Init+0x128>)
 800086c:	f000 fc2c 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fc1f 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f000 fc0f 	bl	80010c8 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48001000 	.word	0x48001000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fe:	2007      	movs	r0, #7
 8000900:	f000 fb2a 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_I2C_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d127      	bne.n	8000982 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_I2C_MspInit+0x80>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_I2C_MspInit+0x80>)
 8000938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_I2C_MspInit+0x80>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800094a:	23c0      	movs	r3, #192	; 0xc0
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095a:	2304      	movs	r3, #4
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_I2C_MspInit+0x84>)
 8000966:	f000 fbaf 	bl	80010c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0x80>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0x80>)
 8000970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_I2C_MspInit+0x80>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005400 	.word	0x40005400
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_SPI_MspInit+0x7c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d128      	bne.n	8000a0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c4:	6193      	str	r3, [r2, #24]
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_SPI_MspInit+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009ea:	23e0      	movs	r3, #224	; 0xe0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009fa:	2305      	movs	r3, #5
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 fb5e 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40013000 	.word	0x40013000
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <HAL_TIM_IC_MspInit+0x80>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d129      	bne.n	8000a92 <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6153      	str	r3, [r2, #20]
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_TIM_IC_MspInit+0x84>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a80:	2306      	movs	r3, #6
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fb1b 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0x8c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12f      	bne.n	8000b26 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_UART_MspInit+0x90>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af6:	2330      	movs	r3, #48	; 0x30
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <HAL_UART_MspInit+0x94>)
 8000b12:	f000 fad9 	bl	80010c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2025      	movs	r0, #37	; 0x25
 8000b1c:	f000 fa27 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b20:	2025      	movs	r0, #37	; 0x25
 8000b22:	f000 fa40 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000800 	.word	0x48000800

08000b3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_PCD_MspInit+0x80>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d129      	bne.n	8000bb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b88:	230e      	movs	r3, #14
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b96:	f000 fa97 	bl	80010c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005c00 	.word	0x40005c00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f88e 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART1_IRQHandler+0x10>)
 8000c1e:	f003 f8ef 	bl	8003e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000124 	.word	0x20000124

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 fa21 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fb73 	bl	800036c <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	0800518c 	.word	0x0800518c
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	200004a0 	.word	0x200004a0

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f94f 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe02 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	2000049c 	.word	0x2000049c

08000d58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000049c 	.word	0x2000049c

08000d70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d008      	beq.n	8000ffe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e020      	b.n	8001040 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 020e 	bic.w	r2, r2, #14
 800100c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800105e:	2b02      	cmp	r3, #2
 8001060:	d005      	beq.n	800106e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e027      	b.n	80010be <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 020e 	bic.w	r2, r2, #14
 800107c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	4798      	blx	r3
    } 
  }
  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e154      	b.n	8001382 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8146 	beq.w	800137c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d005      	beq.n	8001108 <HAL_GPIO_Init+0x40>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d017      	beq.n	80011a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d123      	bne.n	80011fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0203 	and.w	r2, r3, #3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80a0 	beq.w	800137c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b58      	ldr	r3, [pc, #352]	; (80013a0 <HAL_GPIO_Init+0x2d8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2d8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <HAL_GPIO_Init+0x2d8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001254:	4a53      	ldr	r2, [pc, #332]	; (80013a4 <HAL_GPIO_Init+0x2dc>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127e:	d019      	beq.n	80012b4 <HAL_GPIO_Init+0x1ec>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2e0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_GPIO_Init+0x1e8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2e4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00d      	beq.n	80012ac <HAL_GPIO_Init+0x1e4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x1e0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_GPIO_Init+0x1dc>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e008      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2305      	movs	r3, #5
 80012a6:	e006      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x1ee>
 80012b4:	2300      	movs	r3, #0
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c6:	4937      	ldr	r1, [pc, #220]	; (80013a4 <HAL_GPIO_Init+0x2dc>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f47f aea3 	bne.w	80010d8 <HAL_GPIO_Init+0x10>
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	48001000 	.word	0x48001000
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e081      	b.n	8001502 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fa7c 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800144c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e006      	b.n	8001474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d104      	bne.n	8001486 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69d9      	ldr	r1, [r3, #28]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	461a      	mov	r2, r3
 8001518:	460b      	mov	r3, r1
 800151a:	817b      	strh	r3, [r7, #10]
 800151c:	4613      	mov	r3, r2
 800151e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b20      	cmp	r3, #32
 800152a:	f040 80da 	bne.w	80016e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2C_Master_Transmit+0x30>
 8001538:	2302      	movs	r3, #2
 800153a:	e0d3      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001544:	f7ff fc08 	bl	8000d58 <HAL_GetTick>
 8001548:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2319      	movs	r3, #25
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f8f0 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0be      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2221      	movs	r2, #33	; 0x21
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2210      	movs	r2, #16
 8001572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	893a      	ldrh	r2, [r7, #8]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	d90e      	bls.n	80015b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	8979      	ldrh	r1, [r7, #10]
 80015a6:	4b51      	ldr	r3, [pc, #324]	; (80016ec <HAL_I2C_Master_Transmit+0x1e0>)
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f9f6 	bl	80019a0 <I2C_TransferConfig>
 80015b4:	e06c      	b.n	8001690 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	8979      	ldrh	r1, [r7, #10]
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_I2C_Master_Transmit+0x1e0>)
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f9e5 	bl	80019a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015d6:	e05b      	b.n	8001690 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6a39      	ldr	r1, [r7, #32]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f8ed 	bl	80017bc <I2C_WaitOnTXISFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e07b      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	3b01      	subs	r3, #1
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d034      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x184>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	2b00      	cmp	r3, #0
 800162c:	d130      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f87f 	bl	800173c <I2C_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04d      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d90e      	bls.n	8001670 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	b2da      	uxtb	r2, r3
 800165e:	8979      	ldrh	r1, [r7, #10]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f999 	bl	80019a0 <I2C_TransferConfig>
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167e:	b2da      	uxtb	r2, r3
 8001680:	8979      	ldrh	r1, [r7, #10]
 8001682:	2300      	movs	r3, #0
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f988 	bl	80019a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d19e      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6a39      	ldr	r1, [r7, #32]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f8cc 	bl	800183c <I2C_WaitOnSTOPFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e01a      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2220      	movs	r2, #32
 80016b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80016c2:	400b      	ands	r3, r1
 80016c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
  }
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	80002000 	.word	0x80002000
 80016f0:	fe00e800 	.word	0xfe00e800

080016f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d103      	bne.n	8001712 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d007      	beq.n	8001730 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	619a      	str	r2, [r3, #24]
  }
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800174c:	e022      	b.n	8001794 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d01e      	beq.n	8001794 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001756:	f7ff faff 	bl	8000d58 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d302      	bcc.n	800176c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d113      	bne.n	8001794 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e00f      	b.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	4013      	ands	r3, r2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d0cd      	beq.n	800174e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c8:	e02c      	b.n	8001824 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f870 	bl	80018b4 <I2C_IsAcknowledgeFailed>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e02a      	b.n	8001834 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d01e      	beq.n	8001824 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e6:	f7ff fab7 	bl	8000d58 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d302      	bcc.n	80017fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d113      	bne.n	8001824 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2220      	movs	r2, #32
 800180c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e007      	b.n	8001834 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d1cb      	bne.n	80017ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001848:	e028      	b.n	800189c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f830 	bl	80018b4 <I2C_IsAcknowledgeFailed>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e026      	b.n	80018ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800185e:	f7ff fa7b 	bl	8000d58 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	d302      	bcc.n	8001874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d113      	bne.n	800189c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e007      	b.n	80018ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d1cf      	bne.n	800184a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d161      	bne.n	8001992 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018dc:	d02b      	beq.n	8001936 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018ec:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ee:	e022      	b.n	8001936 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d01e      	beq.n	8001936 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f8:	f7ff fa2e 	bl	8000d58 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	429a      	cmp	r2, r3
 8001906:	d302      	bcc.n	800190e <I2C_IsAcknowledgeFailed+0x5a>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d113      	bne.n	8001936 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0220 	orr.w	r2, r3, #32
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e02e      	b.n	8001994 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b20      	cmp	r3, #32
 8001942:	d1d5      	bne.n	80018f0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2210      	movs	r2, #16
 800194a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2220      	movs	r2, #32
 8001952:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fecd 	bl	80016f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <I2C_IsAcknowledgeFailed+0xe8>)
 8001966:	400b      	ands	r3, r1
 8001968:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0204 	orr.w	r2, r3, #4
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	fe00e800 	.word	0xfe00e800

080019a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	817b      	strh	r3, [r7, #10]
 80019ae:	4613      	mov	r3, r2
 80019b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	0d5b      	lsrs	r3, r3, #21
 80019bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <I2C_TransferConfig+0x58>)
 80019c2:	430b      	orrs	r3, r1
 80019c4:	43db      	mvns	r3, r3
 80019c6:	ea02 0103 	and.w	r1, r2, r3
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019d0:	7a7b      	ldrb	r3, [r7, #9]
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	431a      	orrs	r2, r3
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	03ff63ff 	.word	0x03ff63ff

080019fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d138      	bne.n	8001a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e032      	b.n	8001a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	d139      	bne.n	8001b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e033      	b.n	8001b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2224      	movs	r2, #36	; 0x24
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2c:	b08b      	sub	sp, #44	; 0x2c
 8001b2e:	af06      	add	r7, sp, #24
 8001b30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fff3 	bl	8000b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fa71 	bl	800504a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e04c      	b.n	8001c08 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3301      	adds	r3, #1
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	b298      	uxth	r0, r3
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3336      	adds	r3, #54	; 0x36
 8001bac:	4602      	mov	r2, r0
 8001bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3338      	adds	r3, #56	; 0x38
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3340      	adds	r3, #64	; 0x40
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3ad      	bcc.n	8001b6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e044      	b.n	8001ca2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3b5      	bcc.n	8001c18 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	687e      	ldr	r6, [r7, #4]
 8001cb4:	466d      	mov	r5, sp
 8001cb6:	f106 0410 	add.w	r4, r6, #16
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	1d33      	adds	r3, r6, #4
 8001cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f003 f9da 	bl	8005080 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f001 b823 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 817d 	beq.w	800201e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d24:	4bbc      	ldr	r3, [pc, #752]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4bb9      	ldr	r3, [pc, #740]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d15c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x10e>
 8001d3c:	4bb6      	ldr	r3, [pc, #728]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d155      	bne.n	8001df6 <HAL_RCC_OscConfig+0x10e>
 8001d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0x94>
 8001d76:	4ba8      	ldr	r3, [pc, #672]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e015      	b.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d98:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001da4:	4b9c      	ldr	r3, [pc, #624]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001db0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001db4:	fa92 f2a2 	rbit	r2, r2
 8001db8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001dbc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f002 021f 	and.w	r2, r2, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 811f 	beq.w	800201c <HAL_RCC_OscConfig+0x334>
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8116 	bne.w	800201c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f000 bfaf 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12e>
 8001e08:	4b83      	ldr	r3, [pc, #524]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a82      	ldr	r2, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e036      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x158>
 8001e26:	4b7c      	ldr	r3, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7b      	ldr	r2, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b79      	ldr	r3, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a78      	ldr	r2, [pc, #480]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e021      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x184>
 8001e52:	4b71      	ldr	r3, [pc, #452]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a70      	ldr	r2, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6e      	ldr	r3, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6d      	ldr	r2, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0x19c>
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e84:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f023 020f 	bic.w	r2, r3, #15
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	495f      	ldr	r1, [pc, #380]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d059      	beq.n	8001f62 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff53 	bl	8000d58 <HAL_GetTick>
 8001eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff4e 	bl	8000d58 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d902      	bls.n	8001ece <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f000 bf43 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 8001ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ee2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x218>
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	e015      	b.n	8001f2c <HAL_RCC_OscConfig+0x244>
 8001f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f04:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f30:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ab      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1d0>
 8001f60:	e05d      	b.n	800201e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fef9 	bl	8000d58 <HAL_GetTick>
 8001f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fef4 	bl	8000d58 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f000 bee9 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 8001f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x2cc>
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e015      	b.n	8001fe0 <HAL_RCC_OscConfig+0x2f8>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fd0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCC_OscConfig+0x330>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001fe8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ff4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ab      	bne.n	8001f6c <HAL_RCC_OscConfig+0x284>
 8002014:	e003      	b.n	800201e <HAL_RCC_OscConfig+0x336>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 817d 	beq.w	800232e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002034:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002040:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d172      	bne.n	8002132 <HAL_RCC_OscConfig+0x44a>
 800204c:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d16c      	bne.n	8002132 <HAL_RCC_OscConfig+0x44a>
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800206a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0x3a0>
 8002082:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e013      	b.n	80020b0 <HAL_RCC_OscConfig+0x3c8>
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2202      	movs	r2, #2
 80020b2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80020b6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020ba:	fa92 f2a2 	rbit	r2, r2
 80020be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80020c2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80020c6:	fab2 f282 	clz	r2, r2
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCC_OscConfig+0x410>
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f000 be2e 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	21f8      	movs	r1, #248	; 0xf8
 800210e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002116:	fa91 f1a1 	rbit	r1, r1
 800211a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800211e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002122:	fab1 f181 	clz	r1, r1
 8002126:	b2c9      	uxtb	r1, r1
 8002128:	408b      	lsls	r3, r1
 800212a:	4969      	ldr	r1, [pc, #420]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002130:	e0fd      	b.n	800232e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8088 	beq.w	8002254 <HAL_RCC_OscConfig+0x56c>
 8002144:	2301      	movs	r3, #1
 8002146:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002156:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	461a      	mov	r2, r3
 800216c:	2301      	movs	r3, #1
 800216e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fdf2 	bl	8000d58 <HAL_GetTick>
 8002174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fded 	bl	8000d58 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	f000 bde2 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4d8>
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e013      	b.n	80021e8 <HAL_RCC_OscConfig+0x500>
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80021e4:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2202      	movs	r2, #2
 80021ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80021ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021f2:	fa92 f2a2 	rbit	r2, r2
 80021f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80021fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f042 0220 	orr.w	r2, r2, #32
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f002 021f 	and.w	r2, r2, #31
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0af      	beq.n	800217a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	21f8      	movs	r1, #248	; 0xf8
 8002230:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002238:	fa91 f1a1 	rbit	r1, r1
 800223c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002240:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002244:	fab1 f181 	clz	r1, r1
 8002248:	b2c9      	uxtb	r1, r1
 800224a:	408b      	lsls	r3, r1
 800224c:	4920      	ldr	r1, [pc, #128]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	e06c      	b.n	800232e <HAL_RCC_OscConfig+0x646>
 8002254:	2301      	movs	r3, #1
 8002256:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	461a      	mov	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fd6a 	bl	8000d58 <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe fd65 	bl	8000d58 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bd5a 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d104      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5ec>
 80022ca:	4b01      	ldr	r3, [pc, #4]	; (80022d0 <HAL_RCC_OscConfig+0x5e8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	e015      	b.n	80022fc <HAL_RCC_OscConfig+0x614>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80022f8:	4bc8      	ldr	r3, [pc, #800]	; (800261c <HAL_RCC_OscConfig+0x934>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2202      	movs	r2, #2
 80022fe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002302:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002306:	fa92 f2a2 	rbit	r2, r2
 800230a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800230e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002312:	fab2 f282 	clz	r2, r2
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f042 0220 	orr.w	r2, r2, #32
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f002 021f 	and.w	r2, r2, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ad      	bne.n	800228a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8110 	beq.w	8002564 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d079      	beq.n	8002448 <HAL_RCC_OscConfig+0x760>
 8002354:	2301      	movs	r3, #1
 8002356:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4bab      	ldr	r3, [pc, #684]	; (8002620 <HAL_RCC_OscConfig+0x938>)
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	2301      	movs	r3, #1
 800237c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fceb 	bl	8000d58 <HAL_GetTick>
 8002382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fce6 	bl	8000d58 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d902      	bls.n	800239e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	f000 bcdb 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 800239e:	2302      	movs	r3, #2
 80023a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f8:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x934>)
 80023fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002404:	2102      	movs	r1, #2
 8002406:	6019      	str	r1, [r3, #0]
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f1a3 	rbit	r1, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800241e:	6019      	str	r1, [r3, #0]
  return result;
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0a0      	beq.n	8002388 <HAL_RCC_OscConfig+0x6a0>
 8002446:	e08d      	b.n	8002564 <HAL_RCC_OscConfig+0x87c>
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002474:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_RCC_OscConfig+0x938>)
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	461a      	mov	r2, r3
 8002486:	2300      	movs	r3, #0
 8002488:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe fc65 	bl	8000d58 <HAL_GetTick>
 800248e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002494:	f7fe fc60 	bl	8000d58 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d902      	bls.n	80024aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	f000 bc55 	b.w	8002d54 <HAL_RCC_OscConfig+0x106c>
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024d6:	2202      	movs	r2, #2
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024fa:	2202      	movs	r2, #2
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002514:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x934>)
 8002518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002522:	2102      	movs	r1, #2
 8002524:	6019      	str	r1, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f1a3 	rbit	r1, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800253c:	6019      	str	r1, [r3, #0]
  return result;
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d197      	bne.n	8002494 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 81a1 	beq.w	80028bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <HAL_RCC_OscConfig+0x934>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_RCC_OscConfig+0x934>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_RCC_OscConfig+0x934>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002596:	61d3      	str	r3, [r2, #28]
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_OscConfig+0x934>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_OscConfig+0x93c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11a      	bne.n	80025fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_RCC_OscConfig+0x93c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_RCC_OscConfig+0x93c>)
 80025cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fbc1 	bl	8000d58 <HAL_GetTick>
 80025d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7fe fbbc 	bl	8000d58 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	; 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e3b1      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_OscConfig+0x93c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ef      	beq.n	80025dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10d      	bne.n	8002628 <HAL_RCC_OscConfig+0x940>
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_OscConfig+0x934>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a02      	ldr	r2, [pc, #8]	; (800261c <HAL_RCC_OscConfig+0x934>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e03c      	b.n	8002694 <HAL_RCC_OscConfig+0x9ac>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	10908120 	.word	0x10908120
 8002624:	40007000 	.word	0x40007000
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0x96a>
 8002638:	4bc1      	ldr	r3, [pc, #772]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4ac0      	ldr	r2, [pc, #768]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	4bbe      	ldr	r3, [pc, #760]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4abd      	ldr	r2, [pc, #756]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800264a:	f023 0304 	bic.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e020      	b.n	8002694 <HAL_RCC_OscConfig+0x9ac>
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x994>
 8002662:	4bb7      	ldr	r3, [pc, #732]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4ab6      	ldr	r2, [pc, #728]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	4bb4      	ldr	r3, [pc, #720]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4ab3      	ldr	r2, [pc, #716]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x9ac>
 800267c:	4bb0      	ldr	r3, [pc, #704]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4aaf      	ldr	r2, [pc, #700]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	4bad      	ldr	r3, [pc, #692]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4aac      	ldr	r2, [pc, #688]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8081 	beq.w	80027a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fb57 	bl	8000d58 <HAL_GetTick>
 80026aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fb52 	bl	8000d58 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e345      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002718:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0xa4c>
 800272e:	4b84      	ldr	r3, [pc, #528]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	e013      	b.n	800275c <HAL_RCC_OscConfig+0xa74>
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800273c:	2202      	movs	r2, #2
 800273e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002760:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002764:	2102      	movs	r1, #2
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	fa92 f1a2 	rbit	r1, r2
 8002776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800277a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800277e:	6011      	str	r1, [r2, #0]
  return result;
 8002780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002784:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d084      	beq.n	80026b0 <HAL_RCC_OscConfig+0x9c8>
 80027a6:	e07f      	b.n	80028a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe fad6 	bl	8000d58 <HAL_GetTick>
 80027ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fad1 	bl	8000d58 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e2c4      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027d2:	2202      	movs	r2, #2
 80027d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027f6:	2202      	movs	r2, #2
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002810:	601a      	str	r2, [r3, #0]
  return result;
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800281a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d102      	bne.n	8002836 <HAL_RCC_OscConfig+0xb4e>
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	e013      	b.n	800285e <HAL_RCC_OscConfig+0xb76>
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800283e:	2202      	movs	r2, #2
 8002840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	fa93 f2a3 	rbit	r2, r3
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002862:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002866:	2102      	movs	r1, #2
 8002868:	6011      	str	r1, [r2, #0]
 800286a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	fa92 f1a2 	rbit	r1, r2
 8002878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002880:	6011      	str	r1, [r2, #0]
  return result;
 8002882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002886:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	fab2 f282 	clz	r2, r2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f002 021f 	and.w	r2, r2, #31
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d184      	bne.n	80027b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8242 	beq.w	8002d52 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_RCC_OscConfig+0xc58>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	f000 8213 	beq.w	8002d02 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f040 8162 	bne.w	8002bb2 <HAL_RCC_OscConfig+0xeca>
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80028f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002912:	601a      	str	r2, [r3, #0]
  return result;
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800291c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002928:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	461a      	mov	r2, r3
 8002930:	2300      	movs	r3, #0
 8002932:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fa10 	bl	8000d58 <HAL_GetTick>
 8002938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293c:	e00c      	b.n	8002958 <HAL_RCC_OscConfig+0xc70>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fa08 	bl	8000d58 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1fd      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800297c:	601a      	str	r2, [r3, #0]
  return result;
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002986:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0xcba>
 800299c:	4bb0      	ldr	r3, [pc, #704]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e027      	b.n	80029f2 <HAL_RCC_OscConfig+0xd0a>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4b9c      	ldr	r3, [pc, #624]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80029fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029fe:	6011      	str	r1, [r2, #0]
 8002a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a04:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fa92 f1a2 	rbit	r1, r2
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a16:	6011      	str	r1, [r2, #0]
  return result;
 8002a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a1c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d182      	bne.n	8002944 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3e:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	497f      	ldr	r1, [pc, #508]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a94:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe f954 	bl	8000d58 <HAL_GetTick>
 8002ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe f94f 	bl	8000d58 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e144      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002aee:	601a      	str	r2, [r3, #0]
  return result;
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe2c>
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	e027      	b.n	8002b64 <HAL_RCC_OscConfig+0xe7c>
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b68:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b76:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	fa92 f1a2 	rbit	r1, r2
 8002b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b84:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b88:	6011      	str	r1, [r2, #0]
  return result;
 8002b8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d082      	beq.n	8002ab6 <HAL_RCC_OscConfig+0xdce>
 8002bb0:	e0cf      	b.n	8002d52 <HAL_RCC_OscConfig+0x106a>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bd6:	601a      	str	r2, [r3, #0]
  return result;
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002be0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f8ae 	bl	8000d58 <HAL_GetTick>
 8002bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe f8a9 	bl	8000d58 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e09e      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c3a:	601a      	str	r2, [r3, #0]
  return result;
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d104      	bne.n	8002c64 <HAL_RCC_OscConfig+0xf7c>
 8002c5a:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <HAL_RCC_OscConfig+0xf78>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e029      	b.n	8002cb4 <HAL_RCC_OscConfig+0xfcc>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x1078>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fa92 f1a2 	rbit	r1, r2
 8002cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cd8:	6011      	str	r1, [r2, #0]
  return result;
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d180      	bne.n	8002c02 <HAL_RCC_OscConfig+0xf1a>
 8002d00:	e027      	b.n	8002d52 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e01e      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_OscConfig+0x1078>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b09e      	sub	sp, #120	; 0x78
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e162      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b90      	ldr	r3, [pc, #576]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	498b      	ldr	r1, [pc, #556]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e14a      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	497f      	ldr	r1, [pc, #508]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80dc 	beq.w	8002f90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d13c      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xf6>
 8002de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xa6>
 8002e04:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e00f      	b.n	8002e2a <HAL_RCC_ClockConfig+0xc6>
 8002e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e3a:	fab2 f282 	clz	r2, r2
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f042 0220 	orr.w	r2, r2, #32
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	f002 021f 	and.w	r2, r2, #31
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d17b      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0f3      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d13c      	bne.n	8002edc <HAL_RCC_ClockConfig+0x178>
 8002e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x128>
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	e00f      	b.n	8002eac <HAL_RCC_ClockConfig+0x148>
 8002e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea8:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb4:	fa92 f2a2 	rbit	r2, r2
 8002eb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ebc:	fab2 f282 	clz	r2, r2
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f042 0220 	orr.w	r2, r2, #32
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d13a      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b2      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
 8002edc:	2302      	movs	r3, #2
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e00d      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1bc>
 8002f04:	2302      	movs	r3, #2
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	2302      	movs	r3, #2
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2202      	movs	r2, #2
 8002f22:	61ba      	str	r2, [r7, #24]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	617a      	str	r2, [r7, #20]
  return result;
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0220 	orr.w	r2, r2, #32
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e079      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f60:	f7fd fefa 	bl	8000d58 <HAL_GetTick>
 8002f64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fd fef6 	bl	8000d58 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e061      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d214      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e040      	b.n	8003042 <HAL_RCC_ClockConfig+0x2de>
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_ClockConfig+0x2e8>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	491a      	ldr	r1, [pc, #104]	; (800304c <HAL_RCC_ClockConfig+0x2e8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x2e8>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4912      	ldr	r1, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x2e8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003006:	f000 f829 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800300a:	4601      	mov	r1, r0
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_RCC_ClockConfig+0x2e8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	22f0      	movs	r2, #240	; 0xf0
 8003016:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	fa92 f2a2 	rbit	r2, r2
 800301e:	60fa      	str	r2, [r7, #12]
  return result;
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	fab2 f282 	clz	r2, r2
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	40d3      	lsrs	r3, r2
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x2ec>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	fa21 f303 	lsr.w	r3, r1, r3
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <HAL_RCC_ClockConfig+0x2f0>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_RCC_ClockConfig+0x2f4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fe48 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3778      	adds	r7, #120	; 0x78
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	0800514c 	.word	0x0800514c
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003076:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d002      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x30>
 8003086:	2b08      	cmp	r3, #8
 8003088:	d003      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x36>
 800308a:	e03c      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc4>)
 800308e:	623b      	str	r3, [r7, #32]
      break;
 8003090:	e03c      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003098:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800309c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	607a      	str	r2, [r7, #4]
  return result;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	40d3      	lsrs	r3, r2
 80030b0:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_GetSysClockFreq+0xc0>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	220f      	movs	r2, #15
 80030c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	fa92 f2a2 	rbit	r2, r2
 80030c8:	60fa      	str	r2, [r7, #12]
  return result;
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	40d3      	lsrs	r3, r2
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
 80030f4:	e004      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_RCC_GetSysClockFreq+0xd0>)
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	623b      	str	r3, [r7, #32]
      break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003108:	623b      	str	r3, [r7, #32]
      break;
 800310a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310c:	6a3b      	ldr	r3, [r7, #32]
}
 800310e:	4618      	mov	r0, r3
 8003110:	372c      	adds	r7, #44	; 0x2c
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	08005164 	.word	0x08005164
 8003128:	08005174 	.word	0x08005174
 800312c:	003d0900 	.word	0x003d0900

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800314e:	f7ff ffef 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003152:	4601      	mov	r1, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800315c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003160:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	603a      	str	r2, [r7, #0]
  return result;
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	0800515c 	.word	0x0800515c

0800318c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003192:	f7ff ffcd 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003196:	4601      	mov	r1, r0
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	603a      	str	r2, [r7, #0]
  return result;
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	40d3      	lsrs	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	0800515c 	.word	0x0800515c

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b092      	sub	sp, #72	; 0x48
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80d4 	beq.w	800339c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f4:	4b4e      	ldr	r3, [pc, #312]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
 800320c:	4b48      	ldr	r3, [pc, #288]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b45      	ldr	r3, [pc, #276]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322a:	4b42      	ldr	r3, [pc, #264]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a41      	ldr	r2, [pc, #260]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003236:	f7fd fd8f 	bl	8000d58 <HAL_GetTick>
 800323a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323c:	e008      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323e:	f7fd fd8b 	bl	8000d58 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e169      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8084 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003278:	429a      	cmp	r2, r3
 800327a:	d07c      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800327c:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	461a      	mov	r2, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	461a      	mov	r2, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04b      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fd fd3b 	bl	8000d58 <HAL_GetTick>
 80032e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd fd37 	bl	8000d58 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e113      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032fc:	2302      	movs	r3, #2
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	61fb      	str	r3, [r7, #28]
  return result;
 8003314:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d108      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800332a:	4b01      	ldr	r3, [pc, #4]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	e00d      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
 8003338:	10908100 	.word	0x10908100
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	4b78      	ldr	r3, [pc, #480]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2202      	movs	r2, #2
 800334e:	613a      	str	r2, [r7, #16]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	60fa      	str	r2, [r7, #12]
  return result;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	fab2 f282 	clz	r2, r2
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	f002 021f 	and.w	r2, r2, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0b7      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003376:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	496a      	ldr	r1, [pc, #424]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033a8:	4b60      	ldr	r3, [pc, #384]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	495d      	ldr	r1, [pc, #372]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4956      	ldr	r1, [pc, #344]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e4:	4b51      	ldr	r3, [pc, #324]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	494e      	ldr	r1, [pc, #312]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4947      	ldr	r1, [pc, #284]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	493f      	ldr	r1, [pc, #252]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f023 0220 	bic.w	r2, r3, #32
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4938      	ldr	r1, [pc, #224]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4930      	ldr	r1, [pc, #192]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4929      	ldr	r1, [pc, #164]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4921      	ldr	r1, [pc, #132]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	491a      	ldr	r1, [pc, #104]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	4912      	ldr	r1, [pc, #72]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	490b      	ldr	r1, [pc, #44]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3748      	adds	r7, #72	; 0x48
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e09d      	b.n	800367e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d009      	beq.n	8003568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	e005      	b.n	8003568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fa08 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a8:	d902      	bls.n	80035b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e002      	b.n	80035b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	ea42 0103 	orr.w	r1, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 0204 	and.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800364c:	ea42 0103 	orr.w	r1, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e049      	b.n	800372c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fd f9b5 	bl	8000a1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f000 f8d1 	bl	800386c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_IC_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e088      	b.n	8003864 <HAL_TIM_IC_ConfigChannel+0x130>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f000 f90c 	bl	800398c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 020c 	bic.w	r2, r2, #12
 8003782:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6999      	ldr	r1, [r3, #24]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	619a      	str	r2, [r3, #24]
 8003796:	e060      	b.n	800385a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d11c      	bne.n	80037d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f000 f955 	bl	8003a5c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6999      	ldr	r1, [r3, #24]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	021a      	lsls	r2, r3, #8
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	619a      	str	r2, [r3, #24]
 80037d6:	e040      	b.n	800385a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11b      	bne.n	8003816 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f000 f972 	bl	8003ad6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 020c 	bic.w	r2, r2, #12
 8003800:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
 8003814:	e021      	b.n	800385a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0c      	cmp	r3, #12
 800381a:	d11c      	bne.n	8003856 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f000 f98f 	bl	8003b4e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800383e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69d9      	ldr	r1, [r3, #28]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
 8003854:	e001      	b.n	800385a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <TIM_Base_SetConfig+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x38>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a39      	ldr	r2, [pc, #228]	; (8003974 <TIM_Base_SetConfig+0x108>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x38>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a38      	ldr	r2, [pc, #224]	; (8003978 <TIM_Base_SetConfig+0x10c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x38>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a37      	ldr	r2, [pc, #220]	; (800397c <TIM_Base_SetConfig+0x110>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	; (8003970 <TIM_Base_SetConfig+0x104>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0x108>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_Base_SetConfig+0x10c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a28      	ldr	r2, [pc, #160]	; (800397c <TIM_Base_SetConfig+0x110>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a27      	ldr	r2, [pc, #156]	; (8003980 <TIM_Base_SetConfig+0x114>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <TIM_Base_SetConfig+0x118>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0x11c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <TIM_Base_SetConfig+0x104>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00f      	beq.n	8003954 <TIM_Base_SetConfig+0xe8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a11      	ldr	r2, [pc, #68]	; (800397c <TIM_Base_SetConfig+0x110>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00b      	beq.n	8003954 <TIM_Base_SetConfig+0xe8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a10      	ldr	r2, [pc, #64]	; (8003980 <TIM_Base_SetConfig+0x114>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_Base_SetConfig+0xe8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <TIM_Base_SetConfig+0x118>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_Base_SetConfig+0xe8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <TIM_Base_SetConfig+0x11c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d103      	bne.n	800395c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	615a      	str	r2, [r3, #20]
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800

0800398c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_TI1_SetConfig+0xbc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <TIM_TI1_SetConfig+0x56>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d00f      	beq.n	80039e2 <TIM_TI1_SetConfig+0x56>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <TIM_TI1_SetConfig+0xc0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_TI1_SetConfig+0x56>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <TIM_TI1_SetConfig+0xc4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_TI1_SetConfig+0x56>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <TIM_TI1_SetConfig+0xc8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_TI1_SetConfig+0x56>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <TIM_TI1_SetConfig+0xcc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <TIM_TI1_SetConfig+0x5a>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <TIM_TI1_SetConfig+0x5c>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e003      	b.n	8003a06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f023 030a 	bic.w	r3, r3, #10
 8003a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 030a 	and.w	r3, r3, #10
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40013400 	.word	0x40013400
 8003a58:	40014000 	.word	0x40014000

08003a5c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	031b      	lsls	r3, r3, #12
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	031b      	lsls	r3, r3, #12
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e063      	b.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d013      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40014000 	.word	0x40014000

08003cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e040      	b.n	8003d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fc feda 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fb78 	bl	80043fc <UART_SetConfig>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e022      	b.n	8003d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fd42 	bl	80047a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fdc9 	bl	80048ec <UART_CheckIdleState>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d13d      	bne.n	8003df6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_UART_Receive_IT+0x22>
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e036      	b.n	8003df8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Receive_IT+0x34>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e02f      	b.n	8003df8 <HAL_UART_Receive_IT+0x94>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d018      	beq.n	8003de6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69f9      	ldr	r1, [r7, #28]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e6      	bne.n	8003db4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fe8b 	bl	8004b08 <UART_Start_Receive_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	e000      	b.n	8003df8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b0ba      	sub	sp, #232	; 0xe8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e2e:	4013      	ands	r3, r2
 8003e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 82a3 	beq.w	80043a4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
      }
      return;
 8003e66:	e29d      	b.n	80043a4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8117 	beq.w	80040a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e82:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_UART_IRQHandler+0x298>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 810a 	beq.w	80040a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_UART_IRQHandler+0xbc>
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d011      	beq.n	8003eec <HAL_UART_IRQHandler+0xec>
 8003ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee2:	f043 0204 	orr.w	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_UART_IRQHandler+0x11c>
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d017      	beq.n	8003f58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2208      	movs	r2, #8
 8003f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4e:	f043 0208 	orr.w	r2, r3, #8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_UART_IRQHandler+0x18a>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8209 	beq.w	80043a8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04f      	beq.n	8004082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fe28 	bl	8004c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d141      	bne.n	800407a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800400c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800402e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800403a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1d9      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_UART_IRQHandler+0x29c>)
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fff8 	bl	800104c <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00f      	b.n	8004092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9ac 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e00b      	b.n	8004092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9a8 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e007      	b.n	8004092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9a4 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004090:	e18a      	b.n	80043a8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004092:	bf00      	nop
    return;
 8004094:	e188      	b.n	80043a8 <HAL_UART_IRQHandler+0x5a8>
 8004096:	bf00      	nop
 8004098:	04000120 	.word	0x04000120
 800409c:	08004cff 	.word	0x08004cff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	f040 8143 	bne.w	8004330 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 813c 	beq.w	8004330 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8135 	beq.w	8004330 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	f040 80b1 	bne.w	8004240 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 815c 	beq.w	80043ac <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040fe:	429a      	cmp	r2, r3
 8004100:	f080 8154 	bcs.w	80043ac <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800410a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b20      	cmp	r3, #32
 8004116:	f000 8085 	beq.w	8004224 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800412e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004144:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004148:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004150:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1da      	bne.n	800411a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004188:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800418c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800419a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e1      	bne.n	8004164 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e3      	bne.n	80041a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004206:	65bb      	str	r3, [r7, #88]	; 0x58
 8004208:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800420c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e4      	bne.n	80041e4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc fedb 	bl	8000fda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004230:	b29b      	uxth	r3, r3
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8d3 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800423e:	e0b5      	b.n	80043ac <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a7 	beq.w	80043b0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80a2 	beq.w	80043b0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e4      	bne.n	800426c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	623b      	str	r3, [r7, #32]
   return(result);
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042c6:	633a      	str	r2, [r7, #48]	; 0x30
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	69b9      	ldr	r1, [r7, #24]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	617b      	str	r3, [r7, #20]
   return(result);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e4      	bne.n	80042ec <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f85b 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800432e:	e03f      	b.n	80043b0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <HAL_UART_IRQHandler+0x55a>
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fe6f 	bl	8005036 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004358:	e02d      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01c      	beq.n	80043b4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
    }
    return;
 8004382:	e017      	b.n	80043b4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fcc4 	bl	8004d2a <UART_EndTransmit_IT>
    return;
 80043a2:	e008      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80043a4:	bf00      	nop
 80043a6:	e006      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80043b4:	bf00      	nop
  }

}
 80043b6:	37e8      	adds	r7, #232	; 0xe8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800442a:	f023 030c 	bic.w	r3, r3, #12
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	6979      	ldr	r1, [r7, #20]
 8004434:	430b      	orrs	r3, r1
 8004436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4aa8      	ldr	r2, [pc, #672]	; (8004718 <UART_SetConfig+0x31c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d120      	bne.n	80044be <UART_SetConfig+0xc2>
 800447c:	4ba7      	ldr	r3, [pc, #668]	; (800471c <UART_SetConfig+0x320>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d817      	bhi.n	80044b8 <UART_SetConfig+0xbc>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x94>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044b3 	.word	0x080044b3
 800449c:	080044a7 	.word	0x080044a7
 80044a0:	2301      	movs	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e0b5      	b.n	8004612 <UART_SetConfig+0x216>
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e0b2      	b.n	8004612 <UART_SetConfig+0x216>
 80044ac:	2304      	movs	r3, #4
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e0af      	b.n	8004612 <UART_SetConfig+0x216>
 80044b2:	2308      	movs	r3, #8
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e0ac      	b.n	8004612 <UART_SetConfig+0x216>
 80044b8:	2310      	movs	r3, #16
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e0a9      	b.n	8004612 <UART_SetConfig+0x216>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a97      	ldr	r2, [pc, #604]	; (8004720 <UART_SetConfig+0x324>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d124      	bne.n	8004512 <UART_SetConfig+0x116>
 80044c8:	4b94      	ldr	r3, [pc, #592]	; (800471c <UART_SetConfig+0x320>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d4:	d011      	beq.n	80044fa <UART_SetConfig+0xfe>
 80044d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044da:	d817      	bhi.n	800450c <UART_SetConfig+0x110>
 80044dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e0:	d011      	beq.n	8004506 <UART_SetConfig+0x10a>
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d811      	bhi.n	800450c <UART_SetConfig+0x110>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <UART_SetConfig+0xf8>
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d006      	beq.n	8004500 <UART_SetConfig+0x104>
 80044f2:	e00b      	b.n	800450c <UART_SetConfig+0x110>
 80044f4:	2300      	movs	r3, #0
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e08b      	b.n	8004612 <UART_SetConfig+0x216>
 80044fa:	2302      	movs	r3, #2
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e088      	b.n	8004612 <UART_SetConfig+0x216>
 8004500:	2304      	movs	r3, #4
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e085      	b.n	8004612 <UART_SetConfig+0x216>
 8004506:	2308      	movs	r3, #8
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e082      	b.n	8004612 <UART_SetConfig+0x216>
 800450c:	2310      	movs	r3, #16
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e07f      	b.n	8004612 <UART_SetConfig+0x216>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a83      	ldr	r2, [pc, #524]	; (8004724 <UART_SetConfig+0x328>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d124      	bne.n	8004566 <UART_SetConfig+0x16a>
 800451c:	4b7f      	ldr	r3, [pc, #508]	; (800471c <UART_SetConfig+0x320>)
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004524:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004528:	d011      	beq.n	800454e <UART_SetConfig+0x152>
 800452a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800452e:	d817      	bhi.n	8004560 <UART_SetConfig+0x164>
 8004530:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004534:	d011      	beq.n	800455a <UART_SetConfig+0x15e>
 8004536:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800453a:	d811      	bhi.n	8004560 <UART_SetConfig+0x164>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <UART_SetConfig+0x14c>
 8004540:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004544:	d006      	beq.n	8004554 <UART_SetConfig+0x158>
 8004546:	e00b      	b.n	8004560 <UART_SetConfig+0x164>
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e061      	b.n	8004612 <UART_SetConfig+0x216>
 800454e:	2302      	movs	r3, #2
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e05e      	b.n	8004612 <UART_SetConfig+0x216>
 8004554:	2304      	movs	r3, #4
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e05b      	b.n	8004612 <UART_SetConfig+0x216>
 800455a:	2308      	movs	r3, #8
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e058      	b.n	8004612 <UART_SetConfig+0x216>
 8004560:	2310      	movs	r3, #16
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e055      	b.n	8004612 <UART_SetConfig+0x216>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6f      	ldr	r2, [pc, #444]	; (8004728 <UART_SetConfig+0x32c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d124      	bne.n	80045ba <UART_SetConfig+0x1be>
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <UART_SetConfig+0x320>)
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004578:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800457c:	d011      	beq.n	80045a2 <UART_SetConfig+0x1a6>
 800457e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004582:	d817      	bhi.n	80045b4 <UART_SetConfig+0x1b8>
 8004584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004588:	d011      	beq.n	80045ae <UART_SetConfig+0x1b2>
 800458a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458e:	d811      	bhi.n	80045b4 <UART_SetConfig+0x1b8>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <UART_SetConfig+0x1a0>
 8004594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004598:	d006      	beq.n	80045a8 <UART_SetConfig+0x1ac>
 800459a:	e00b      	b.n	80045b4 <UART_SetConfig+0x1b8>
 800459c:	2300      	movs	r3, #0
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e037      	b.n	8004612 <UART_SetConfig+0x216>
 80045a2:	2302      	movs	r3, #2
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e034      	b.n	8004612 <UART_SetConfig+0x216>
 80045a8:	2304      	movs	r3, #4
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e031      	b.n	8004612 <UART_SetConfig+0x216>
 80045ae:	2308      	movs	r3, #8
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e02e      	b.n	8004612 <UART_SetConfig+0x216>
 80045b4:	2310      	movs	r3, #16
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e02b      	b.n	8004612 <UART_SetConfig+0x216>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <UART_SetConfig+0x330>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d124      	bne.n	800460e <UART_SetConfig+0x212>
 80045c4:	4b55      	ldr	r3, [pc, #340]	; (800471c <UART_SetConfig+0x320>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80045cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045d0:	d011      	beq.n	80045f6 <UART_SetConfig+0x1fa>
 80045d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045d6:	d817      	bhi.n	8004608 <UART_SetConfig+0x20c>
 80045d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045dc:	d011      	beq.n	8004602 <UART_SetConfig+0x206>
 80045de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e2:	d811      	bhi.n	8004608 <UART_SetConfig+0x20c>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <UART_SetConfig+0x1f4>
 80045e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ec:	d006      	beq.n	80045fc <UART_SetConfig+0x200>
 80045ee:	e00b      	b.n	8004608 <UART_SetConfig+0x20c>
 80045f0:	2300      	movs	r3, #0
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e00d      	b.n	8004612 <UART_SetConfig+0x216>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e00a      	b.n	8004612 <UART_SetConfig+0x216>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e007      	b.n	8004612 <UART_SetConfig+0x216>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e004      	b.n	8004612 <UART_SetConfig+0x216>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e001      	b.n	8004612 <UART_SetConfig+0x216>
 800460e:	2310      	movs	r3, #16
 8004610:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d15c      	bne.n	80046d6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800461c:	7ffb      	ldrb	r3, [r7, #31]
 800461e:	2b08      	cmp	r3, #8
 8004620:	d827      	bhi.n	8004672 <UART_SetConfig+0x276>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x22c>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800464d 	.word	0x0800464d
 800462c:	08004655 	.word	0x08004655
 8004630:	0800465d 	.word	0x0800465d
 8004634:	08004673 	.word	0x08004673
 8004638:	08004663 	.word	0x08004663
 800463c:	08004673 	.word	0x08004673
 8004640:	08004673 	.word	0x08004673
 8004644:	08004673 	.word	0x08004673
 8004648:	0800466b 	.word	0x0800466b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fe fd7c 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8004650:	61b8      	str	r0, [r7, #24]
        break;
 8004652:	e013      	b.n	800467c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004654:	f7fe fd9a 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800465c:	4b34      	ldr	r3, [pc, #208]	; (8004730 <UART_SetConfig+0x334>)
 800465e:	61bb      	str	r3, [r7, #24]
        break;
 8004660:	e00c      	b.n	800467c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004662:	f7fe fcfb 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004666:	61b8      	str	r0, [r7, #24]
        break;
 8004668:	e008      	b.n	800467c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	61bb      	str	r3, [r7, #24]
        break;
 8004670:	e004      	b.n	800467c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	77bb      	strb	r3, [r7, #30]
        break;
 800467a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8084 	beq.w	800478c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	005a      	lsls	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d916      	bls.n	80046d0 <UART_SetConfig+0x2d4>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d212      	bcs.n	80046d0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b29a      	uxth	r2, r3
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	89fa      	ldrh	r2, [r7, #14]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e05d      	b.n	800478c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77bb      	strb	r3, [r7, #30]
 80046d4:	e05a      	b.n	800478c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d6:	7ffb      	ldrb	r3, [r7, #31]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d836      	bhi.n	800474a <UART_SetConfig+0x34e>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x2e8>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004709 	.word	0x08004709
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004735 	.word	0x08004735
 80046f0:	0800474b 	.word	0x0800474b
 80046f4:	0800473b 	.word	0x0800473b
 80046f8:	0800474b 	.word	0x0800474b
 80046fc:	0800474b 	.word	0x0800474b
 8004700:	0800474b 	.word	0x0800474b
 8004704:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe fd1e 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 800470c:	61b8      	str	r0, [r7, #24]
        break;
 800470e:	e021      	b.n	8004754 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004710:	f7fe fd3c 	bl	800318c <HAL_RCC_GetPCLK2Freq>
 8004714:	61b8      	str	r0, [r7, #24]
        break;
 8004716:	e01d      	b.n	8004754 <UART_SetConfig+0x358>
 8004718:	40013800 	.word	0x40013800
 800471c:	40021000 	.word	0x40021000
 8004720:	40004400 	.word	0x40004400
 8004724:	40004800 	.word	0x40004800
 8004728:	40004c00 	.word	0x40004c00
 800472c:	40005000 	.word	0x40005000
 8004730:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <UART_SetConfig+0x3a8>)
 8004736:	61bb      	str	r3, [r7, #24]
        break;
 8004738:	e00c      	b.n	8004754 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fe fc8f 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800473e:	61b8      	str	r0, [r7, #24]
        break;
 8004740:	e008      	b.n	8004754 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004746:	61bb      	str	r3, [r7, #24]
        break;
 8004748:	e004      	b.n	8004754 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	77bb      	strb	r3, [r7, #30]
        break;
 8004752:	bf00      	nop
    }

    if (pclk != 0U)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	085a      	lsrs	r2, r3, #1
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d908      	bls.n	8004788 <UART_SetConfig+0x38c>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d204      	bcs.n	8004788 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e001      	b.n	800478c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004798:	7fbb      	ldrb	r3, [r7, #30]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	007a1200 	.word	0x007a1200

080047a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01a      	beq.n	80048be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a6:	d10a      	bne.n	80048be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048fc:	f7fc fa2c 	bl	8000d58 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b08      	cmp	r3, #8
 800490e:	d10e      	bne.n	800492e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f82d 	bl	800497e <UART_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e023      	b.n	8004976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d10e      	bne.n	800495a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f817 	bl	800497e <UART_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e00d      	b.n	8004976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b09c      	sub	sp, #112	; 0x70
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498e:	e0a5      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	f000 80a1 	beq.w	8004adc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fc f9dd 	bl	8000d58 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80049aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d13e      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c4:	667b      	str	r3, [r7, #100]	; 0x64
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e6      	bne.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	663b      	str	r3, [r7, #96]	; 0x60
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a02:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e5      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e067      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d04f      	beq.n	8004adc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d147      	bne.n	8004adc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	613b      	str	r3, [r7, #16]
   return(result);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa8:	623a      	str	r2, [r7, #32]
 8004aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e010      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f43f af4a 	beq.w	8004990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3770      	adds	r7, #112	; 0x70
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b091      	sub	sp, #68	; 0x44
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d10e      	bne.n	8004b5a <UART_Start_Receive_IT+0x52>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <UART_Start_Receive_IT+0x48>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4e:	e01a      	b.n	8004b86 <UART_Start_Receive_IT+0x7e>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b58:	e015      	b.n	8004b86 <UART_Start_Receive_IT+0x7e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <UART_Start_Receive_IT+0x76>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <UART_Start_Receive_IT+0x6c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b72:	e008      	b.n	8004b86 <UART_Start_Receive_IT+0x7e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	227f      	movs	r2, #127	; 0x7f
 8004b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b7c:	e003      	b.n	8004b86 <UART_Start_Receive_IT+0x7e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2222      	movs	r2, #34	; 0x22
 8004b92:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb4:	637a      	str	r2, [r7, #52]	; 0x34
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d107      	bne.n	8004be2 <UART_Start_Receive_IT+0xda>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <UART_Start_Receive_IT+0x128>)
 8004bde:	665a      	str	r2, [r3, #100]	; 0x64
 8004be0:	e002      	b.n	8004be8 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <UART_Start_Receive_IT+0x12c>)
 8004be6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	69f9      	ldr	r1, [r7, #28]
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e6      	bne.n	8004bf0 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3744      	adds	r7, #68	; 0x44
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	08004edb 	.word	0x08004edb
 8004c34:	08004d7f 	.word	0x08004d7f

08004c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b095      	sub	sp, #84	; 0x54
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e6      	bne.n	8004c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d118      	bne.n	8004ce0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e6      	bne.n	8004cae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004cf2:	bf00      	nop
 8004cf4:	3754      	adds	r7, #84	; 0x54
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fb57 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fb23 	bl	80043bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d76:	bf00      	nop
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b096      	sub	sp, #88	; 0x58
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	f040 8094 	bne.w	8004ec2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004da0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004da4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	400a      	ands	r2, r1
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d177      	bne.n	8004ed2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e00:	647b      	str	r3, [r7, #68]	; 0x44
 8004e02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	623b      	str	r3, [r7, #32]
   return(result);
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e34:	633a      	str	r2, [r7, #48]	; 0x30
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12e      	bne.n	8004eba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	69b9      	ldr	r1, [r7, #24]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d103      	bne.n	8004eaa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fa96 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eb8:	e00b      	b.n	8004ed2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fac2 	bl	8000444 <HAL_UART_RxCpltCallback>
}
 8004ec0:	e007      	b.n	8004ed2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699a      	ldr	r2, [r3, #24]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0208 	orr.w	r2, r2, #8
 8004ed0:	619a      	str	r2, [r3, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	3758      	adds	r7, #88	; 0x58
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b096      	sub	sp, #88	; 0x58
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ee8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	f040 8094 	bne.w	800501e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004efc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f06:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004f0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d177      	bne.n	800502e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d12e      	bne.n	8005016 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 0310 	bic.w	r3, r3, #16
 8004fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e6      	bne.n	8004fbe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d103      	bne.n	8005006 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2210      	movs	r2, #16
 8005004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff f9e8 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005014:	e00b      	b.n	800502e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fb fa14 	bl	8000444 <HAL_UART_RxCpltCallback>
}
 800501c:	e007      	b.n	800502e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0208 	orr.w	r2, r2, #8
 800502c:	619a      	str	r2, [r3, #24]
}
 800502e:	bf00      	nop
 8005030:	3758      	adds	r7, #88	; 0x58
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005052:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005056:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	b29b      	uxth	r3, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	b29b      	uxth	r3, r3
 8005068:	4013      	ands	r3, r2
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005080:	b084      	sub	sp, #16
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	f107 0014 	add.w	r0, r7, #20
 800508e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	b004      	add	sp, #16
 80050c0:	4770      	bx	lr
	...

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	; (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	; (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 f820 	bl	800511c <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08005184 	.word	0x08005184
 8005100:	08005184 	.word	0x08005184
 8005104:	08005184 	.word	0x08005184
 8005108:	08005188 	.word	0x08005188

0800510c <memset>:
 800510c:	4402      	add	r2, r0
 800510e:	4603      	mov	r3, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	d100      	bne.n	8005116 <memset+0xa>
 8005114:	4770      	bx	lr
 8005116:	f803 1b01 	strb.w	r1, [r3], #1
 800511a:	e7f9      	b.n	8005110 <memset+0x4>

0800511c <_init>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr

08005128 <_fini>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr
